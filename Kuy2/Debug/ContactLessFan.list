
ContactLessFan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006900  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08006aa0  08006aa0  00016aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007348  08007348  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007348  08007348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007350  08007350  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001ec  08007544  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08007544  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de31  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002137  00000000  00000000  0002e04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016dd4  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2da  00000000  00000000  0004880c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d57e  00000000  00000000  00052ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000e00e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a88 	.word	0x08006a88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08006a88 	.word	0x08006a88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <DWT_Delay_Init+0x58>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <DWT_Delay_Init+0x58>)
 8000f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f86:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <DWT_Delay_Init+0x58>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <DWT_Delay_Init+0x58>)
 8000f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f92:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fb2:	bf00      	nop
     __ASM volatile ("NOP");
 8000fb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fb6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <DWT_Delay_Init+0x5c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e000      	b.n	8000fc6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fc4:	2301      	movs	r3, #1
  }
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000edf0 	.word	0xe000edf0
 8000fd4:	e0001000 	.word	0xe0001000

08000fd8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <delay+0x3c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fe6:	f002 fb47 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <delay+0x40>)
 8000fee:	fba3 2302 	umull	r2, r3, r3, r2
 8000ff2:	0c9b      	lsrs	r3, r3, #18
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ffc:	bf00      	nop
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <delay+0x3c>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f8      	bcc.n	8000ffe <delay+0x26>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	e0001000 	.word	0xe0001000
 8001018:	431bde83 	.word	0x431bde83

0800101c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 fd32 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f001 fd14 	bl	8002ab4 <HAL_GPIO_Init>
}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <DHT_Start>:


void DHT_Start (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001098:	f7ff ff6e 	bl	8000f78 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 800109c:	2102      	movs	r1, #2
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <DHT_Start+0x40>)
 80010a0:	f7ff ffbc 	bl	800101c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010a4:	2200      	movs	r2, #0
 80010a6:	2102      	movs	r1, #2
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <DHT_Start+0x40>)
 80010aa:	f001 fe9d 	bl	8002de8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80010ae:	f244 6050 	movw	r0, #18000	; 0x4650
 80010b2:	f7ff ff91 	bl	8000fd8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80010b6:	2201      	movs	r2, #1
 80010b8:	2102      	movs	r1, #2
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <DHT_Start+0x40>)
 80010bc:	f001 fe94 	bl	8002de8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80010c0:	2014      	movs	r0, #20
 80010c2:	f7ff ff89 	bl	8000fd8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010c6:	2102      	movs	r1, #2
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DHT_Start+0x40>)
 80010ca:	f7ff ffc5 	bl	8001058 <Set_Pin_Input>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000

080010d8 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010e2:	2028      	movs	r0, #40	; 0x28
 80010e4:	f7ff ff78 	bl	8000fd8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80010e8:	2102      	movs	r1, #2
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <DHT_Check_Response+0x58>)
 80010ec:	f001 fe64 	bl	8002db8 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10e      	bne.n	8001114 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80010f6:	2050      	movs	r0, #80	; 0x50
 80010f8:	f7ff ff6e 	bl	8000fd8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80010fc:	2102      	movs	r1, #2
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <DHT_Check_Response+0x58>)
 8001100:	f001 fe5a 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <DHT_Check_Response+0x38>
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e001      	b.n	8001114 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001110:	23ff      	movs	r3, #255	; 0xff
 8001112:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001114:	bf00      	nop
 8001116:	2102      	movs	r1, #2
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <DHT_Check_Response+0x58>)
 800111a:	f001 fe4d 	bl	8002db8 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f8      	bne.n	8001116 <DHT_Check_Response+0x3e>

	return Response;
 8001124:	79fb      	ldrb	r3, [r7, #7]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40020000 	.word	0x40020000

08001134 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800113a:	2300      	movs	r3, #0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	e037      	b.n	80011b0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001140:	bf00      	nop
 8001142:	2102      	movs	r1, #2
 8001144:	481e      	ldr	r0, [pc, #120]	; (80011c0 <DHT_Read+0x8c>)
 8001146:	f001 fe37 	bl	8002db8 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f8      	beq.n	8001142 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001150:	2028      	movs	r0, #40	; 0x28
 8001152:	f7ff ff41 	bl	8000fd8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001156:	2102      	movs	r1, #2
 8001158:	4819      	ldr	r0, [pc, #100]	; (80011c0 <DHT_Read+0x8c>)
 800115a:	f001 fe2d 	bl	8002db8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10e      	bne.n	8001182 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2201      	movs	r2, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	b25a      	sxtb	r2, r3
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	4013      	ands	r3, r2
 800117c:	b25b      	sxtb	r3, r3
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e00b      	b.n	800119a <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	f1c3 0307 	rsb	r3, r3, #7
 8001188:	2201      	movs	r2, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	b25a      	sxtb	r2, r3
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4313      	orrs	r3, r2
 8001196:	b25b      	sxtb	r3, r3
 8001198:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800119a:	bf00      	nop
 800119c:	2102      	movs	r1, #2
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <DHT_Read+0x8c>)
 80011a0:	f001 fe0a 	bl	8002db8 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f8      	bne.n	800119c <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	3301      	adds	r3, #1
 80011ae:	71bb      	strb	r3, [r7, #6]
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d9c4      	bls.n	8001140 <DHT_Read+0xc>
	}
	return i;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020000 	.word	0x40020000

080011c4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80011cc:	f7ff ff62 	bl	8001094 <DHT_Start>
	Presence = DHT_Check_Response ();
 80011d0:	f7ff ff82 	bl	80010d8 <DHT_Check_Response>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <DHT_GetData+0xa4>)
 80011da:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80011dc:	f7ff ffaa 	bl	8001134 <DHT_Read>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <DHT_GetData+0xa8>)
 80011e6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011e8:	f7ff ffa4 	bl	8001134 <DHT_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <DHT_GetData+0xac>)
 80011f2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80011f4:	f7ff ff9e 	bl	8001134 <DHT_Read>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <DHT_GetData+0xb0>)
 80011fe:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001200:	f7ff ff98 	bl	8001134 <DHT_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <DHT_GetData+0xb4>)
 800120a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800120c:	f7ff ff92 	bl	8001134 <DHT_Read>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <DHT_GetData+0xb8>)
 8001216:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <DHT_GetData+0xb8>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <DHT_GetData+0xa8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <DHT_GetData+0xac>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <DHT_GetData+0xb0>)
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <DHT_GetData+0xb4>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	4413      	add	r3, r2
 8001236:	4299      	cmp	r1, r3
 8001238:	d111      	bne.n	800125e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <DHT_GetData+0xb0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <DHT_GetData+0xa8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000208 	.word	0x20000208
 800126c:	20000338 	.word	0x20000338
 8001270:	2000033a 	.word	0x2000033a
 8001274:	20000339 	.word	0x20000339
 8001278:	2000033e 	.word	0x2000033e
 800127c:	2000033c 	.word	0x2000033c

08001280 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b098      	sub	sp, #96	; 0x60
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800128a:	f000 fa47 	bl	800171c <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800128e:	495d      	ldr	r1, [pc, #372]	; (8001404 <ESP_Init+0x184>)
 8001290:	485d      	ldr	r0, [pc, #372]	; (8001408 <ESP_Init+0x188>)
 8001292:	f000 fc5c 	bl	8001b4e <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8001296:	495d      	ldr	r1, [pc, #372]	; (800140c <ESP_Init+0x18c>)
 8001298:	485d      	ldr	r0, [pc, #372]	; (8001410 <ESP_Init+0x190>)
 800129a:	f000 fc58 	bl	8001b4e <Uart_sendstring>
	for (int i=0; i<5; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012a2:	e00a      	b.n	80012ba <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80012a4:	4959      	ldr	r1, [pc, #356]	; (800140c <ESP_Init+0x18c>)
 80012a6:	485b      	ldr	r0, [pc, #364]	; (8001414 <ESP_Init+0x194>)
 80012a8:	f000 fc51 	bl	8001b4e <Uart_sendstring>
		HAL_Delay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f001 faaa 	bl	8002808 <HAL_Delay>
	for (int i=0; i<5; i++)
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	3301      	adds	r3, #1
 80012b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012bc:	2b04      	cmp	r3, #4
 80012be:	ddf1      	ble.n	80012a4 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80012c0:	4950      	ldr	r1, [pc, #320]	; (8001404 <ESP_Init+0x184>)
 80012c2:	4855      	ldr	r0, [pc, #340]	; (8001418 <ESP_Init+0x198>)
 80012c4:	f000 fc43 	bl	8001b4e <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80012c8:	bf00      	nop
 80012ca:	494e      	ldr	r1, [pc, #312]	; (8001404 <ESP_Init+0x184>)
 80012cc:	4853      	ldr	r0, [pc, #332]	; (800141c <ESP_Init+0x19c>)
 80012ce:	f000 fccf 	bl	8001c70 <Wait_for>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f8      	beq.n	80012ca <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80012d8:	494c      	ldr	r1, [pc, #304]	; (800140c <ESP_Init+0x18c>)
 80012da:	4851      	ldr	r0, [pc, #324]	; (8001420 <ESP_Init+0x1a0>)
 80012dc:	f000 fc37 	bl	8001b4e <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80012e0:	4948      	ldr	r1, [pc, #288]	; (8001404 <ESP_Init+0x184>)
 80012e2:	4850      	ldr	r0, [pc, #320]	; (8001424 <ESP_Init+0x1a4>)
 80012e4:	f000 fc33 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80012e8:	bf00      	nop
 80012ea:	4946      	ldr	r1, [pc, #280]	; (8001404 <ESP_Init+0x184>)
 80012ec:	484e      	ldr	r0, [pc, #312]	; (8001428 <ESP_Init+0x1a8>)
 80012ee:	f000 fcbf 	bl	8001c70 <Wait_for>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f8      	beq.n	80012ea <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80012f8:	4944      	ldr	r1, [pc, #272]	; (800140c <ESP_Init+0x18c>)
 80012fa:	484c      	ldr	r0, [pc, #304]	; (800142c <ESP_Init+0x1ac>)
 80012fc:	f000 fc27 	bl	8001b4e <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8001300:	4942      	ldr	r1, [pc, #264]	; (800140c <ESP_Init+0x18c>)
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <ESP_Init+0x1b0>)
 8001304:	f000 fc23 	bl	8001b4e <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001308:	f107 0008 	add.w	r0, r7, #8
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4948      	ldr	r1, [pc, #288]	; (8001434 <ESP_Init+0x1b4>)
 8001312:	f003 ffc9 	bl	80052a8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	493a      	ldr	r1, [pc, #232]	; (8001404 <ESP_Init+0x184>)
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fc16 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8001322:	bf00      	nop
 8001324:	4937      	ldr	r1, [pc, #220]	; (8001404 <ESP_Init+0x184>)
 8001326:	4844      	ldr	r0, [pc, #272]	; (8001438 <ESP_Init+0x1b8>)
 8001328:	f000 fca2 	bl	8001c70 <Wait_for>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f8      	beq.n	8001324 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4940      	ldr	r1, [pc, #256]	; (800143c <ESP_Init+0x1bc>)
 800133a:	4618      	mov	r0, r3
 800133c:	f003 ffb4 	bl	80052a8 <siprintf>
	Uart_sendstring(data,pc_uart);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4931      	ldr	r1, [pc, #196]	; (800140c <ESP_Init+0x18c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc01 	bl	8001b4e <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 800134c:	492d      	ldr	r1, [pc, #180]	; (8001404 <ESP_Init+0x184>)
 800134e:	483c      	ldr	r0, [pc, #240]	; (8001440 <ESP_Init+0x1c0>)
 8001350:	f000 fbfd 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8001354:	bf00      	nop
 8001356:	492b      	ldr	r1, [pc, #172]	; (8001404 <ESP_Init+0x184>)
 8001358:	483a      	ldr	r0, [pc, #232]	; (8001444 <ESP_Init+0x1c4>)
 800135a:	f000 fc89 	bl	8001c70 <Wait_for>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f8      	beq.n	8001356 <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8001364:	bf00      	nop
 8001366:	4a27      	ldr	r2, [pc, #156]	; (8001404 <ESP_Init+0x184>)
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <ESP_Init+0x1c8>)
 800136a:	4838      	ldr	r0, [pc, #224]	; (800144c <ESP_Init+0x1cc>)
 800136c:	f000 fc06 	bl	8001b7c <Copy_upto>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f7      	beq.n	8001366 <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8001376:	bf00      	nop
 8001378:	4922      	ldr	r1, [pc, #136]	; (8001404 <ESP_Init+0x184>)
 800137a:	4835      	ldr	r0, [pc, #212]	; (8001450 <ESP_Init+0x1d0>)
 800137c:	f000 fc78 	bl	8001c70 <Wait_for>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f8      	beq.n	8001378 <ESP_Init+0xf8>
	int len = strlen (buffer);
 8001386:	4830      	ldr	r0, [pc, #192]	; (8001448 <ESP_Init+0x1c8>)
 8001388:	f7fe ff34 	bl	80001f4 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 8001390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001392:	3b01      	subs	r3, #1
 8001394:	4a2c      	ldr	r2, [pc, #176]	; (8001448 <ESP_Init+0x1c8>)
 8001396:	2100      	movs	r1, #0
 8001398:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <ESP_Init+0x1c8>)
 80013a0:	492c      	ldr	r1, [pc, #176]	; (8001454 <ESP_Init+0x1d4>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 ff80 	bl	80052a8 <siprintf>
	Uart_sendstring(data, pc_uart);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4917      	ldr	r1, [pc, #92]	; (800140c <ESP_Init+0x18c>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fbcd 	bl	8001b4e <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <ESP_Init+0x184>)
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <ESP_Init+0x1d8>)
 80013b8:	f000 fbc9 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80013bc:	bf00      	nop
 80013be:	4911      	ldr	r1, [pc, #68]	; (8001404 <ESP_Init+0x184>)
 80013c0:	4826      	ldr	r0, [pc, #152]	; (800145c <ESP_Init+0x1dc>)
 80013c2:	f000 fc55 	bl	8001c70 <Wait_for>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f8      	beq.n	80013be <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80013cc:	490f      	ldr	r1, [pc, #60]	; (800140c <ESP_Init+0x18c>)
 80013ce:	4824      	ldr	r0, [pc, #144]	; (8001460 <ESP_Init+0x1e0>)
 80013d0:	f000 fbbd 	bl	8001b4e <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80013d4:	490b      	ldr	r1, [pc, #44]	; (8001404 <ESP_Init+0x184>)
 80013d6:	4823      	ldr	r0, [pc, #140]	; (8001464 <ESP_Init+0x1e4>)
 80013d8:	f000 fbb9 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80013dc:	bf00      	nop
 80013de:	4909      	ldr	r1, [pc, #36]	; (8001404 <ESP_Init+0x184>)
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <ESP_Init+0x1d0>)
 80013e2:	f000 fc45 	bl	8001c70 <Wait_for>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f8      	beq.n	80013de <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <ESP_Init+0x18c>)
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <ESP_Init+0x1e8>)
 80013f0:	f000 fbad 	bl	8001b4e <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80013f4:	4905      	ldr	r1, [pc, #20]	; (800140c <ESP_Init+0x18c>)
 80013f6:	481d      	ldr	r0, [pc, #116]	; (800146c <ESP_Init+0x1ec>)
 80013f8:	f000 fba9 	bl	8001b4e <Uart_sendstring>

}
 80013fc:	bf00      	nop
 80013fe:	3760      	adds	r7, #96	; 0x60
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200003ac 	.word	0x200003ac
 8001408:	08006ea4 	.word	0x08006ea4
 800140c:	20000458 	.word	0x20000458
 8001410:	08006eb0 	.word	0x08006eb0
 8001414:	08006ebc 	.word	0x08006ebc
 8001418:	08006ec0 	.word	0x08006ec0
 800141c:	08006ec8 	.word	0x08006ec8
 8001420:	08006ed4 	.word	0x08006ed4
 8001424:	08006ee0 	.word	0x08006ee0
 8001428:	08006ef0 	.word	0x08006ef0
 800142c:	08006f08 	.word	0x08006f08
 8001430:	08006f18 	.word	0x08006f18
 8001434:	08006f3c 	.word	0x08006f3c
 8001438:	08006f54 	.word	0x08006f54
 800143c:	08006f68 	.word	0x08006f68
 8001440:	08006f7c 	.word	0x08006f7c
 8001444:	08006f88 	.word	0x08006f88
 8001448:	20000340 	.word	0x20000340
 800144c:	08006f98 	.word	0x08006f98
 8001450:	08006f9c 	.word	0x08006f9c
 8001454:	08006fa4 	.word	0x08006fa4
 8001458:	08006fb4 	.word	0x08006fb4
 800145c:	08006fc4 	.word	0x08006fc4
 8001460:	08006fdc 	.word	0x08006fdc
 8001464:	08006fec 	.word	0x08006fec
 8001468:	08007000 	.word	0x08007000
 800146c:	08007014 	.word	0x08007014

08001470 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b099      	sub	sp, #100	; 0x64
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7fe feba 	bl	80001f4 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8001484:	f107 000c 	add.w	r0, r7, #12
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	491b      	ldr	r1, [pc, #108]	; (80014fc <Server_Send+0x8c>)
 800148e:	f003 ff0b 	bl	80052a8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	491a      	ldr	r1, [pc, #104]	; (8001500 <Server_Send+0x90>)
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fb58 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 800149e:	bf00      	nop
 80014a0:	4917      	ldr	r1, [pc, #92]	; (8001500 <Server_Send+0x90>)
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <Server_Send+0x94>)
 80014a4:	f000 fbe4 	bl	8001c70 <Wait_for>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f8      	beq.n	80014a0 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 80014ae:	4914      	ldr	r1, [pc, #80]	; (8001500 <Server_Send+0x90>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fb4c 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80014b6:	bf00      	nop
 80014b8:	4911      	ldr	r1, [pc, #68]	; (8001500 <Server_Send+0x90>)
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <Server_Send+0x98>)
 80014bc:	f000 fbd8 	bl	8001c70 <Wait_for>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f8      	beq.n	80014b8 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <Server_Send+0x9c>)
 80014cc:	461c      	mov	r4, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Uart_sendstring(data, wifi_uart);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4909      	ldr	r1, [pc, #36]	; (8001500 <Server_Send+0x90>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fb36 	bl	8001b4e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80014e2:	bf00      	nop
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <Server_Send+0x90>)
 80014e6:	480a      	ldr	r0, [pc, #40]	; (8001510 <Server_Send+0xa0>)
 80014e8:	f000 fbc2 	bl	8001c70 <Wait_for>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f8      	beq.n	80014e4 <Server_Send+0x74>
	return 1;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3764      	adds	r7, #100	; 0x64
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	08007034 	.word	0x08007034
 8001500:	200003ac 	.word	0x200003ac
 8001504:	08007048 	.word	0x08007048
 8001508:	0800704c 	.word	0x0800704c
 800150c:	08007054 	.word	0x08007054
 8001510:	08006f9c 	.word	0x08006f9c

08001514 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800151a:	af00      	add	r7, sp, #0
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	6018      	str	r0, [r3, #0]
 8001520:	463b      	mov	r3, r7
 8001522:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	461a      	mov	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f003 fa55 	bl	80049e0 <memset>
	if (!(strcmp (str, "/ledon")))
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4939      	ldr	r1, [pc, #228]	; (8001620 <Server_Handle+0x10c>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f7fe fe50 	bl	80001e0 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d11f      	bne.n	8001586 <Server_Handle+0x72>
	{
		sprintf (datatosend, Basic_inclusion);
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <Server_Handle+0x110>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fea9 	bl	80052a8 <siprintf>
		strcat(datatosend, LED_ON);
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <Server_Handle+0x114>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fec1 	bl	80052e8 <strcat>
		strcat(datatosend, Terminate);
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <Server_Handle+0x118>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f003 feb9 	bl	80052e8 <strcat>
		Server_Send(datatosend, Link_ID);
 8001576:	463b      	mov	r3, r7
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff ff76 	bl	8001470 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8001584:	e046      	b.n	8001614 <Server_Handle+0x100>
	else if (!(strcmp (str, "/ledoff")))
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4929      	ldr	r1, [pc, #164]	; (8001630 <Server_Handle+0x11c>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	f7fe fe28 	bl	80001e0 <strcmp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d11f      	bne.n	80015d6 <Server_Handle+0xc2>
		sprintf (datatosend, Basic_inclusion);
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <Server_Handle+0x110>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe81 	bl	80052a8 <siprintf>
		strcat(datatosend, LED_OFF);
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <Server_Handle+0x120>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fe99 	bl	80052e8 <strcat>
		strcat(datatosend, Terminate);
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <Server_Handle+0x118>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fe91 	bl	80052e8 <strcat>
		Server_Send(datatosend, Link_ID);
 80015c6:	463b      	mov	r3, r7
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff ff4e 	bl	8001470 <Server_Send>
}
 80015d4:	e01e      	b.n	8001614 <Server_Handle+0x100>
		sprintf (datatosend, Basic_inclusion);
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <Server_Handle+0x110>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fe61 	bl	80052a8 <siprintf>
		strcat(datatosend, LED_OFF);
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Server_Handle+0x120>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fe79 	bl	80052e8 <strcat>
		strcat(datatosend, Terminate);
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <Server_Handle+0x118>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fe71 	bl	80052e8 <strcat>
		Server_Send(datatosend, Link_ID);
 8001606:	463b      	mov	r3, r7
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff ff2e 	bl	8001470 <Server_Send>
}
 8001614:	bf00      	nop
 8001616:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08007064 	.word	0x08007064
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
 800162c:	2000000c 	.word	0x2000000c
 8001630:	0800706c 	.word	0x0800706c
 8001634:	20000008 	.word	0x20000008

08001638 <Server_Start>:

void Server_Start (void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f003 f9ca 	bl	80049e0 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 800164c:	bf00      	nop
 800164e:	1dfa      	adds	r2, r7, #7
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <Server_Start+0xc4>)
 8001652:	2101      	movs	r1, #1
 8001654:	482a      	ldr	r0, [pc, #168]	; (8001700 <Server_Start+0xc8>)
 8001656:	f000 fa4b 	bl	8001af0 <Get_after>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f6      	beq.n	800164e <Server_Start+0x16>
	Link_ID -= 48;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	3b30      	subs	r3, #48	; 0x30
 8001664:	b2db      	uxtb	r3, r3
 8001666:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8001668:	bf00      	nop
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <Server_Start+0xc4>)
 8001670:	4619      	mov	r1, r3
 8001672:	4824      	ldr	r0, [pc, #144]	; (8001704 <Server_Start+0xcc>)
 8001674:	f000 fa82 	bl	8001b7c <Copy_upto>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f5      	beq.n	800166a <Server_Start+0x32>
	if (Look_for("/ledon", buftocopyinto) == 1)
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4820      	ldr	r0, [pc, #128]	; (8001708 <Server_Start+0xd0>)
 8001686:	f000 f8b0 	bl	80017ea <Look_for>
 800168a:	4603      	mov	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10a      	bne.n	80016a6 <Server_Start+0x6e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	2120      	movs	r1, #32
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <Server_Start+0xd4>)
 8001696:	f001 fba7 	bl	8002de8 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4619      	mov	r1, r3
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <Server_Start+0xd0>)
 80016a0:	f7ff ff38 	bl	8001514 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 80016a4:	e026      	b.n	80016f4 <Server_Start+0xbc>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	4818      	ldr	r0, [pc, #96]	; (8001710 <Server_Start+0xd8>)
 80016ae:	f000 f89c 	bl	80017ea <Look_for>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10a      	bne.n	80016ce <Server_Start+0x96>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2120      	movs	r1, #32
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <Server_Start+0xd4>)
 80016be:	f001 fb93 	bl	8002de8 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <Server_Start+0xd8>)
 80016c8:	f7ff ff24 	bl	8001514 <Server_Handle>
}
 80016cc:	e012      	b.n	80016f4 <Server_Start+0xbc>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4619      	mov	r1, r3
 80016d4:	480f      	ldr	r0, [pc, #60]	; (8001714 <Server_Start+0xdc>)
 80016d6:	f000 f888 	bl	80017ea <Look_for>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d009      	beq.n	80016f4 <Server_Start+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2120      	movs	r1, #32
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <Server_Start+0xd4>)
 80016e6:	f001 fb7f 	bl	8002de8 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4619      	mov	r1, r3
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <Server_Start+0xe0>)
 80016f0:	f7ff ff10 	bl	8001514 <Server_Handle>
}
 80016f4:	bf00      	nop
 80016f6:	3748      	adds	r7, #72	; 0x48
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003ac 	.word	0x200003ac
 8001700:	08007074 	.word	0x08007074
 8001704:	0800707c 	.word	0x0800707c
 8001708:	08007064 	.word	0x08007064
 800170c:	40020000 	.word	0x40020000
 8001710:	0800706c 	.word	0x0800706c
 8001714:	08007088 	.word	0x08007088
 8001718:	08007098 	.word	0x08007098

0800171c <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <Ringbuf_init+0x68>)
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <Ringbuf_init+0x6c>)
 8001724:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <Ringbuf_init+0x70>)
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <Ringbuf_init+0x74>)
 800172a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <Ringbuf_init+0x78>)
 800172e:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <Ringbuf_init+0x7c>)
 8001730:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Ringbuf_init+0x80>)
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <Ringbuf_init+0x84>)
 8001736:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <Ringbuf_init+0x88>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <Ringbuf_init+0x88>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <Ringbuf_init+0x8c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <Ringbuf_init+0x8c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <Ringbuf_init+0x88>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <Ringbuf_init+0x88>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <Ringbuf_init+0x8c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <Ringbuf_init+0x8c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	60da      	str	r2, [r3, #12]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000358 	.word	0x20000358
 8001788:	2000020c 	.word	0x2000020c
 800178c:	2000035c 	.word	0x2000035c
 8001790:	20000254 	.word	0x20000254
 8001794:	20000360 	.word	0x20000360
 8001798:	2000029c 	.word	0x2000029c
 800179c:	20000354 	.word	0x20000354
 80017a0:	200002e4 	.word	0x200002e4
 80017a4:	200003ac 	.word	0x200003ac
 80017a8:	20000458 	.word	0x20000458

080017ac <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	3301      	adds	r3, #1
 80017be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c2:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d007      	beq.n	80017de <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fcfd 	bl	80001f4 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fcf8 	bl	80001f4 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8001810:	e002      	b.n	8001818 <Look_for+0x2e>
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	440b      	add	r3, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d1f2      	bne.n	8001812 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	440b      	add	r3, r1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d111      	bne.n	8001864 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8001840:	e005      	b.n	800184e <Look_for+0x64>
	{
		so_far++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
		indx++;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3301      	adds	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	440b      	add	r3, r1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d0ef      	beq.n	8001842 <Look_for+0x58>
 8001862:	e008      	b.n	8001876 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbcf      	blt.n	8001810 <Look_for+0x26>
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	e007      	b.n	8001886 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	429a      	cmp	r2, r3
 800187c:	d101      	bne.n	8001882 <Look_for+0x98>
 800187e:	2301      	movs	r3, #1
 8001880:	e001      	b.n	8001886 <Look_for+0x9c>
	else return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a19      	ldr	r2, [pc, #100]	; (8001900 <Uart_peek+0x70>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <Uart_peek+0x74>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <Uart_peek+0x74>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d102      	bne.n	80018b6 <Uart_peek+0x26>
		  {
		    return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	e01e      	b.n	80018f4 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Uart_peek+0x74>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <Uart_peek+0x74>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	e017      	b.n	80018f4 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <Uart_peek+0x78>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d111      	bne.n	80018f0 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <Uart_peek+0x7c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <Uart_peek+0x7c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	429a      	cmp	r2, r3
 80018da:	d102      	bne.n	80018e2 <Uart_peek+0x52>
		  {
		    return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e008      	b.n	80018f4 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <Uart_peek+0x7c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <Uart_peek+0x7c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	e001      	b.n	80018f4 <Uart_peek+0x64>
		  }
	}

	return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200003ac 	.word	0x200003ac
 8001904:	20000358 	.word	0x20000358
 8001908:	20000458 	.word	0x20000458
 800190c:	20000360 	.word	0x20000360

08001910 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <Uart_read+0x9c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d11c      	bne.n	800195a <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <Uart_read+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <Uart_read+0xa0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	429a      	cmp	r2, r3
 800192e:	d102      	bne.n	8001936 <Uart_read+0x26>
		  {
		    return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	e034      	b.n	80019a0 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <Uart_read+0xa0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <Uart_read+0xa0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <Uart_read+0xa0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <Uart_read+0xa0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	e022      	b.n	80019a0 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <Uart_read+0xa4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d11c      	bne.n	800199c <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <Uart_read+0xa8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <Uart_read+0xa8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	429a      	cmp	r2, r3
 8001970:	d102      	bne.n	8001978 <Uart_read+0x68>
		  {
		    return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e013      	b.n	80019a0 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <Uart_read+0xa8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <Uart_read+0xa8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <Uart_read+0xa8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <Uart_read+0xa8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	e001      	b.n	80019a0 <Uart_read+0x90>
		  }
	}

	else return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	200003ac 	.word	0x200003ac
 80019b0:	20000358 	.word	0x20000358
 80019b4:	20000458 	.word	0x20000458
 80019b8:	20000360 	.word	0x20000360

080019bc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db4c      	blt.n	8001a66 <Uart_write+0xaa>
	{
		if (uart == device_uart){
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <Uart_write+0xb8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d122      	bne.n	8001a1a <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <Uart_write+0xbc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e0:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80019e2:	bf00      	nop
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <Uart_write+0xbc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d0f9      	beq.n	80019e4 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <Uart_write+0xbc>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <Uart_write+0xbc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	b2c9      	uxtb	r1, r1
 80019fe:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <Uart_write+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <Uart_write+0xb8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <Uart_write+0xb8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a16:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001a18:	e025      	b.n	8001a66 <Uart_write+0xaa>
		else if (uart == pc_uart){
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <Uart_write+0xc0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d121      	bne.n	8001a66 <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <Uart_write+0xc4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2e:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001a30:	bf00      	nop
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <Uart_write+0xc4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0f9      	beq.n	8001a32 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <Uart_write+0xc4>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <Uart_write+0xc4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <Uart_write+0xc4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <Uart_write+0xc0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <Uart_write+0xc0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a64:	60da      	str	r2, [r3, #12]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200003ac 	.word	0x200003ac
 8001a78:	2000035c 	.word	0x2000035c
 8001a7c:	20000458 	.word	0x20000458
 8001a80:	20000354 	.word	0x20000354

08001a84 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <IsDataAvailable+0x5c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d10c      	bne.n	8001aae <IsDataAvailable+0x2a>
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <IsDataAvailable+0x60>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <IsDataAvailable+0x60>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	e012      	b.n	8001ad4 <IsDataAvailable+0x50>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <IsDataAvailable+0x64>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10c      	bne.n	8001ad0 <IsDataAvailable+0x4c>
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <IsDataAvailable+0x68>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <IsDataAvailable+0x68>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ace:	e001      	b.n	8001ad4 <IsDataAvailable+0x50>
	return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200003ac 	.word	0x200003ac
 8001ae4:	20000358 	.word	0x20000358
 8001ae8:	20000458 	.word	0x20000458
 8001aec:	20000360 	.word	0x20000360

08001af0 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8001b00:	bf00      	nop
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f8b3 	bl	8001c70 <Wait_for>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d1f8      	bne.n	8001b02 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e012      	b.n	8001b3c <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8001b16:	bf00      	nop
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f7ff ffb3 	bl	8001a84 <IsDataAvailable>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f9      	beq.n	8001b18 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7ff fef3 	bl	8001910 <Uart_read>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbe8      	blt.n	8001b16 <Get_after+0x26>
	}
	return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001b58:	e007      	b.n	8001b6a <Uart_sendstring+0x1c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff29 	bl	80019bc <Uart_write>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f3      	bne.n	8001b5a <Uart_sendstring+0xc>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fb31 	bl	80001f4 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8001b9a:	bf00      	nop
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff71 	bl	8001a84 <IsDataAvailable>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f9      	beq.n	8001b9c <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8001ba8:	e01c      	b.n	8001be4 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <Copy_upto+0xf0>)
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <Copy_upto+0xf0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	4403      	add	r3, r0
 8001bba:	5c8a      	ldrb	r2, [r1, r2]
 8001bbc:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <Copy_upto+0xf0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <Copy_upto+0xf0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8001bd6:	bf00      	nop
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff53 	bl	8001a84 <IsDataAvailable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f9      	beq.n	8001bd8 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fe53 	bl	8001890 <Uart_peek>
 8001bea:	4601      	mov	r1, r0
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4299      	cmp	r1, r3
 8001bf6:	d1d8      	bne.n	8001baa <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8001bf8:	e01b      	b.n	8001c32 <Copy_upto+0xb6>
	{
		so_far++;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe85 	bl	8001910 <Uart_read>
 8001c06:	4601      	mov	r1, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	61ba      	str	r2, [r7, #24]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d101      	bne.n	8001c24 <Copy_upto+0xa8>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e01f      	b.n	8001c64 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8001c24:	bf00      	nop
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff2c 	bl	8001a84 <IsDataAvailable>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f9      	beq.n	8001c26 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fe2c 	bl	8001890 <Uart_peek>
 8001c38:	4601      	mov	r1, r0
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4299      	cmp	r1, r3
 8001c44:	d0d9      	beq.n	8001bfa <Copy_upto+0x7e>
	}

	if (so_far != len)
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d002      	beq.n	8001c54 <Copy_upto+0xd8>
	{
		so_far = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
		goto again;
 8001c52:	e7a2      	b.n	8001b9a <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d101      	bne.n	8001c60 <Copy_upto+0xe4>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e001      	b.n	8001c64 <Copy_upto+0xe8>
	else return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000358 	.word	0x20000358

08001c70 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fab8 	bl	80001f4 <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001c88:	bf00      	nop
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f7ff fefa 	bl	8001a84 <IsDataAvailable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f9      	beq.n	8001c8a <Wait_for+0x1a>
	if (uart == device_uart)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <Wait_for+0xec>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001c9e:	e008      	b.n	8001cb2 <Wait_for+0x42>
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <Wait_for+0xf0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <Wait_for+0xf0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f7ff fdec 	bl	8001890 <Uart_peek>
 8001cb8:	4601      	mov	r1, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4299      	cmp	r1, r3
 8001cc4:	d1ec      	bne.n	8001ca0 <Wait_for+0x30>
 8001cc6:	e02b      	b.n	8001d20 <Wait_for+0xb0>
	else if (uart == pc_uart)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <Wait_for+0xf4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d127      	bne.n	8001d20 <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001cd0:	e008      	b.n	8001ce4 <Wait_for+0x74>
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <Wait_for+0xf8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <Wait_for+0xf8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f7ff fdd3 	bl	8001890 <Uart_peek>
 8001cea:	4601      	mov	r1, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4299      	cmp	r1, r3
 8001cf6:	d1ec      	bne.n	8001cd2 <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 8001cf8:	e012      	b.n	8001d20 <Wait_for+0xb0>
	{
		so_far++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001d00:	6838      	ldr	r0, [r7, #0]
 8001d02:	f7ff fe05 	bl	8001910 <Uart_read>
		if (so_far == len) return 1;
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d101      	bne.n	8001d12 <Wait_for+0xa2>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e01f      	b.n	8001d52 <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 8001d12:	bf00      	nop
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff feb5 	bl	8001a84 <IsDataAvailable>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f9      	beq.n	8001d14 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f7ff fdb5 	bl	8001890 <Uart_peek>
 8001d26:	4601      	mov	r1, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4299      	cmp	r1, r3
 8001d32:	d0e2      	beq.n	8001cfa <Wait_for+0x8a>
	}

	if (so_far != len)
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d002      	beq.n	8001d42 <Wait_for+0xd2>
	{
		so_far = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
		goto again;
 8001d40:	e7a2      	b.n	8001c88 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d101      	bne.n	8001d4e <Wait_for+0xde>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e001      	b.n	8001d52 <Wait_for+0xe2>
	else return -1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003ac 	.word	0x200003ac
 8001d60:	20000358 	.word	0x20000358
 8001d64:	20000458 	.word	0x20000458
 8001d68:	20000360 	.word	0x20000360

08001d6c <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d023      	beq.n	8001dd6 <Uart_isr+0x6a>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01e      	beq.n	8001dd6 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <Uart_isr+0x128>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d107      	bne.n	8001dbe <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <Uart_isr+0x12c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fcf8 	bl	80017ac <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001dbc:	e064      	b.n	8001e88 <Uart_isr+0x11c>
        else if (huart == pc_uart)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <Uart_isr+0x130>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d160      	bne.n	8001e88 <Uart_isr+0x11c>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <Uart_isr+0x134>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fcec 	bl	80017ac <store_char>
        return;
 8001dd4:	e058      	b.n	8001e88 <Uart_isr+0x11c>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d056      	beq.n	8001e8e <Uart_isr+0x122>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d051      	beq.n	8001e8e <Uart_isr+0x122>
    {
    	if (huart == device_uart){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <Uart_isr+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d122      	bne.n	8001e38 <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <Uart_isr+0x138>)
 8001df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <Uart_isr+0x138>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d108      	bne.n	8001e10 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001e0e:	e03d      	b.n	8001e8c <Uart_isr+0x120>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <Uart_isr+0x138>)
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <Uart_isr+0x138>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <Uart_isr+0x138>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <Uart_isr+0x138>)
 8001e26:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	7b7a      	ldrb	r2, [r7, #13]
 8001e34:	605a      	str	r2, [r3, #4]
    	return;
 8001e36:	e029      	b.n	8001e8c <Uart_isr+0x120>
    	else if (huart == pc_uart){
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <Uart_isr+0x130>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d125      	bne.n	8001e8c <Uart_isr+0x120>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <Uart_isr+0x13c>)
 8001e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <Uart_isr+0x13c>)
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d108      	bne.n	8001e5e <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e5a:	60da      	str	r2, [r3, #12]
    	return;
 8001e5c:	e016      	b.n	8001e8c <Uart_isr+0x120>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <Uart_isr+0x13c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <Uart_isr+0x13c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <Uart_isr+0x13c>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e72:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <Uart_isr+0x13c>)
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	7bba      	ldrb	r2, [r7, #14]
 8001e82:	605a      	str	r2, [r3, #4]
    	return;
 8001e84:	bf00      	nop
 8001e86:	e001      	b.n	8001e8c <Uart_isr+0x120>
        return;
 8001e88:	bf00      	nop
 8001e8a:	e000      	b.n	8001e8e <Uart_isr+0x122>
    	return;
 8001e8c:	bf00      	nop
    }
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200003ac 	.word	0x200003ac
 8001e98:	20000358 	.word	0x20000358
 8001e9c:	20000458 	.word	0x20000458
 8001ea0:	20000360 	.word	0x20000360
 8001ea4:	20000254 	.word	0x20000254
 8001ea8:	200002e4 	.word	0x200002e4
 8001eac:	00000000 	.word	0x00000000

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f000 fc33 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f8dd 	bl	800207c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec2:	f000 f9e5 	bl	8002290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ec6:	f000 f9b9 	bl	800223c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001eca:	f000 f93f 	bl	800214c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ece:	f000 f98b 	bl	80021e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  Ringbuf_init();

  ESP_Init("", ""); //input ssid and password.
 8001ed2:	495f      	ldr	r1, [pc, #380]	; (8002050 <main+0x1a0>)
 8001ed4:	485e      	ldr	r0, [pc, #376]	; (8002050 <main+0x1a0>)
 8001ed6:	f7ff f9d3 	bl	8001280 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001eda:	f7ff fbad 	bl	8001638 <Server_Start>
	  HAL_Delay(5000);	//the esp still can't initiate the server yet.
 8001ede:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ee2:	f000 fc91 	bl	8002808 <HAL_Delay>

	  DHT_GetData(&DHT11_Data);		//the code from here for DHT and Ultra works fine
 8001ee6:	485b      	ldr	r0, [pc, #364]	; (8002054 <main+0x1a4>)
 8001ee8:	f7ff f96c 	bl	80011c4 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <main+0x1a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a59      	ldr	r2, [pc, #356]	; (8002058 <main+0x1a8>)
 8001ef2:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efa:	4858      	ldr	r0, [pc, #352]	; (800205c <main+0x1ac>)
 8001efc:	f000 ff74 	bl	8002de8 <HAL_GPIO_WritePin>
	  usDelay(3);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 fa43 	bl	800238c <usDelay>
	  //*** START Ultrasonic measure routine ***//
	  //1. Output 10 usec TRIG
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0c:	4853      	ldr	r0, [pc, #332]	; (800205c <main+0x1ac>)
 8001f0e:	f000 ff6b 	bl	8002de8 <HAL_GPIO_WritePin>
	  usDelay(10);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f000 fa3a 	bl	800238c <usDelay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1e:	484f      	ldr	r0, [pc, #316]	; (800205c <main+0x1ac>)
 8001f20:	f000 ff62 	bl	8002de8 <HAL_GPIO_WritePin>

	  //2. Wait for ECHO pin rising edge
	  while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8001f24:	bf00      	nop
 8001f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2a:	484c      	ldr	r0, [pc, #304]	; (800205c <main+0x1ac>)
 8001f2c:	f000 ff44 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f7      	beq.n	8001f26 <main+0x76>

	  //3. Start measuring ECHO pulse width in usec
	  numTicks = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
	  while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001f3a:	e005      	b.n	8001f48 <main+0x98>
	  {
		  numTicks++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
		  usDelay(2); //2.8usec
 8001f42:	2002      	movs	r0, #2
 8001f44:	f000 fa22 	bl	800238c <usDelay>
	  while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f4c:	4843      	ldr	r0, [pc, #268]	; (800205c <main+0x1ac>)
 8001f4e:	f000 ff33 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d0f1      	beq.n	8001f3c <main+0x8c>
	  };

	  //4. Estimate distance in cm
	  distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002060 <main+0x1b0>
 8001f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7fe fb03 	bl	8000578 <__aeabi_f2d>
 8001f72:	a335      	add	r3, pc, #212	; (adr r3, 8002048 <main+0x198>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fb56 	bl	8000628 <__aeabi_dmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	4625      	mov	r5, r4
 8001f82:	461c      	mov	r4, r3
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <main+0x1b4>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe faf6 	bl	8000578 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe fb48 	bl	8000628 <__aeabi_dmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	f7fe fe1a 	bl	8000bd8 <__aeabi_d2f>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <main+0x1b8>)
 8001fa8:	601a      	str	r2, [r3, #0]

	  //5. Print to UART terminal for debugging
	  sprintf(uartBuf, "Distance (cm)  = %.1f Temperature (C) = %.1f\r\n", distance, Temperature);
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <main+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fae2 	bl	8000578 <__aeabi_f2d>
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	460e      	mov	r6, r1
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <main+0x1a8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fadb 	bl	8000578 <__aeabi_f2d>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	e9cd 3400 	strd	r3, r4, [sp]
 8001fca:	462a      	mov	r2, r5
 8001fcc:	4633      	mov	r3, r6
 8001fce:	4927      	ldr	r1, [pc, #156]	; (800206c <main+0x1bc>)
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <main+0x1c0>)
 8001fd2:	f003 f969 	bl	80052a8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8001fd6:	4826      	ldr	r0, [pc, #152]	; (8002070 <main+0x1c0>)
 8001fd8:	f7fe f90c 	bl	80001f4 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	2364      	movs	r3, #100	; 0x64
 8001fe2:	4923      	ldr	r1, [pc, #140]	; (8002070 <main+0x1c0>)
 8001fe4:	4823      	ldr	r0, [pc, #140]	; (8002074 <main+0x1c4>)
 8001fe6:	f001 fe32 	bl	8003c4e <HAL_UART_Transmit>

	  if(distance <= 60 && distance >=2 && Temperature >= 24){
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <main+0x1b8>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002078 <main+0x1c8>
 8001ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d819      	bhi.n	8002032 <main+0x182>
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <main+0x1b8>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	db0f      	blt.n	8002032 <main+0x182>
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <main+0x1a8>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800201c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	db05      	blt.n	8002032 <main+0x182>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2120      	movs	r1, #32
 800202a:	480c      	ldr	r0, [pc, #48]	; (800205c <main+0x1ac>)
 800202c:	f000 fedc 	bl	8002de8 <HAL_GPIO_WritePin>
 8002030:	e004      	b.n	800203c <main+0x18c>
	  }
	  else{
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2120      	movs	r1, #32
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <main+0x1ac>)
 8002038:	f000 fed6 	bl	8002de8 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(2000); //given it at least 2 sec for it to work.
 800203c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002040:	f000 fbe2 	bl	8002808 <HAL_Delay>
	  Server_Start();
 8002044:	e749      	b.n	8001eda <main+0x2a>
 8002046:	bf00      	nop
 8002048:	66666666 	.word	0x66666666
 800204c:	40066666 	.word	0x40066666
 8002050:	0800709c 	.word	0x0800709c
 8002054:	200003ec 	.word	0x200003ec
 8002058:	200003a4 	.word	0x200003a4
 800205c:	40020000 	.word	0x40020000
 8002060:	00000000 	.word	0x00000000
 8002064:	3c8c7e28 	.word	0x3c8c7e28
 8002068:	200003a8 	.word	0x200003a8
 800206c:	080070a0 	.word	0x080070a0
 8002070:	200003f4 	.word	0x200003f4
 8002074:	20000458 	.word	0x20000458
 8002078:	42700000 	.word	0x42700000

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b094      	sub	sp, #80	; 0x50
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	2230      	movs	r2, #48	; 0x30
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fca8 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <SystemClock_Config+0xc8>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <SystemClock_Config+0xc8>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <SystemClock_Config+0xc8>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <SystemClock_Config+0xcc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <SystemClock_Config+0xcc>)
 80020c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <SystemClock_Config+0xcc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d8:	2301      	movs	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e2:	2302      	movs	r3, #2
 80020e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020ec:	2304      	movs	r3, #4
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80020f0:	2354      	movs	r3, #84	; 0x54
 80020f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f4:	2302      	movs	r3, #2
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020f8:	2304      	movs	r3, #4
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fe8b 	bl	8002e1c <HAL_RCC_OscConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800210c:	f000 f970 	bl	80023f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002110:	230f      	movs	r3, #15
 8002112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800211c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f8e5 	bl	80032fc <HAL_RCC_ClockConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002138:	f000 f95a 	bl	80023f0 <Error_Handler>
  }
}
 800213c:	bf00      	nop
 800213e:	3750      	adds	r7, #80	; 0x50
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000

0800214c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <MX_TIM4_Init+0x94>)
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <MX_TIM4_Init+0x98>)
 800216c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_TIM4_Init+0x94>)
 8002170:	2253      	movs	r2, #83	; 0x53
 8002172:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_TIM4_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <MX_TIM4_Init+0x94>)
 800217c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002180:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_TIM4_Init+0x94>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_TIM4_Init+0x94>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800218e:	4814      	ldr	r0, [pc, #80]	; (80021e0 <MX_TIM4_Init+0x94>)
 8002190:	f001 faa6 	bl	80036e0 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800219a:	f000 f929 	bl	80023f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <MX_TIM4_Init+0x94>)
 80021ac:	f001 fac3 	bl	8003736 <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80021b6:	f000 f91b 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c2:	463b      	mov	r3, r7
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_TIM4_Init+0x94>)
 80021c8:	f001 fc86 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80021d2:	f000 f90d 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000364 	.word	0x20000364
 80021e4:	40000800 	.word	0x40000800

080021e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <MX_USART1_UART_Init+0x50>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_USART1_UART_Init+0x4c>)
 8002220:	f001 fcc8 	bl	8003bb4 <HAL_UART_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800222a:	f000 f8e1 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200003ac 	.word	0x200003ac
 8002238:	40011000 	.word	0x40011000

0800223c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_USART2_UART_Init+0x50>)
 8002244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800224c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002274:	f001 fc9e 	bl	8003bb4 <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800227e:	f000 f8b7 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000458 	.word	0x20000458
 800228c:	40004400 	.word	0x40004400

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <MX_GPIO_Init+0xec>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a33      	ldr	r2, [pc, #204]	; (800237c <MX_GPIO_Init+0xec>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <MX_GPIO_Init+0xec>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <MX_GPIO_Init+0xec>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <MX_GPIO_Init+0xec>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <MX_GPIO_Init+0xec>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <MX_GPIO_Init+0xec>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a25      	ldr	r2, [pc, #148]	; (800237c <MX_GPIO_Init+0xec>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <MX_GPIO_Init+0xec>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_GPIO_Init+0xec>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <MX_GPIO_Init+0xec>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_GPIO_Init+0xec>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7191 	mov.w	r1, #290	; 0x122
 800231c:	4818      	ldr	r0, [pc, #96]	; (8002380 <MX_GPIO_Init+0xf0>)
 800231e:	f000 fd63 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_GPIO_Init+0xf4>)
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4814      	ldr	r0, [pc, #80]	; (8002388 <MX_GPIO_Init+0xf8>)
 8002338:	f000 fbbc 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|TRIG_Pin;
 800233c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <MX_GPIO_Init+0xf0>)
 8002356:	f000 fbad 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800235a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_GPIO_Init+0xf0>)
 8002370:	f000 fba0 	bl	8002ab4 <HAL_GPIO_Init>

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	10210000 	.word	0x10210000
 8002388:	40020800 	.word	0x40020800

0800238c <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d801      	bhi.n	800239e <usDelay+0x12>
 800239a:	2302      	movs	r3, #2
 800239c:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <usDelay+0x60>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <usDelay+0x60>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <usDelay+0x60>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <usDelay+0x60>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <usDelay+0x60>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <usDelay+0x60>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 80023c4:	bf00      	nop
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <usDelay+0x60>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d1f9      	bne.n	80023c6 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <usDelay+0x60>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <usDelay+0x60>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6113      	str	r3, [r2, #16]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40000800 	.word	0x40000800

080023f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_MspInit+0x4c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_MspInit+0x4c>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800243e:	2007      	movs	r0, #7
 8002440:	f000 fad4 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10d      	bne.n	800247e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_TIM_Base_MspInit+0x40>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_TIM_Base_MspInit+0x40>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_TIM_Base_MspInit+0x40>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40000800 	.word	0x40000800
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_UART_MspInit+0x108>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d135      	bne.n	8002522 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80024ee:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002500:	2307      	movs	r3, #7
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <HAL_UART_MspInit+0x110>)
 800250c:	f000 fad2 	bl	8002ab4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	2025      	movs	r0, #37	; 0x25
 8002516:	f000 fa74 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800251a:	2025      	movs	r0, #37	; 0x25
 800251c:	f000 fa8d 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002520:	e038      	b.n	8002594 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_UART_MspInit+0x114>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d133      	bne.n	8002594 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253a:	6413      	str	r3, [r2, #64]	; 0x40
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002564:	230c      	movs	r3, #12
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002574:	2307      	movs	r3, #7
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	4809      	ldr	r0, [pc, #36]	; (80025a4 <HAL_UART_MspInit+0x110>)
 8002580:	f000 fa98 	bl	8002ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2026      	movs	r0, #38	; 0x26
 800258a:	f000 fa3a 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800258e:	2026      	movs	r0, #38	; 0x26
 8002590:	f000 fa53 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40011000 	.word	0x40011000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40004400 	.word	0x40004400

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <MemManage_Handler+0x4>

080025c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 f8e2 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr (&huart1);
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <USART1_IRQHandler+0x14>)
 800260e:	f7ff fbad 	bl	8001d6c <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002612:	4802      	ldr	r0, [pc, #8]	; (800261c <USART1_IRQHandler+0x14>)
 8002614:	f001 fbb4 	bl	8003d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200003ac 	.word	0x200003ac

08002620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <USART2_IRQHandler+0x14>)
 8002626:	f7ff fba1 	bl	8001d6c <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800262a:	4802      	ldr	r0, [pc, #8]	; (8002634 <USART2_IRQHandler+0x14>)
 800262c:	f001 fba8 	bl	8003d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000458 	.word	0x20000458

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f002 f990 	bl	800498c <__errno>
 800266c:	4602      	mov	r2, r0
 800266e:	230c      	movs	r3, #12
 8002670:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <_sbrk+0x64>)
 8002688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20020000 	.word	0x20020000
 8002698:	00000400 	.word	0x00000400
 800269c:	2000032c 	.word	0x2000032c
 80026a0:	200004a8 	.word	0x200004a8

080026a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <SystemInit+0x28>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <SystemInit+0x28>)
 80026b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SystemInit+0x28>)
 80026ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026be:	609a      	str	r2, [r3, #8]
#endif
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d6:	e003      	b.n	80026e0 <LoopCopyDataInit>

080026d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026de:	3104      	adds	r1, #4

080026e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026e0:	480b      	ldr	r0, [pc, #44]	; (8002710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e8:	d3f6      	bcc.n	80026d8 <CopyDataInit>
  ldr  r2, =_sbss
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026ec:	e002      	b.n	80026f4 <LoopFillZerobss>

080026ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026f0:	f842 3b04 	str.w	r3, [r2], #4

080026f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f8:	d3f9      	bcc.n	80026ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026fa:	f7ff ffd3 	bl	80026a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f002 f94b 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7ff fbd5 	bl	8001eb0 <main>
  bx  lr    
 8002706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800270c:	08007358 	.word	0x08007358
  ldr  r0, =_sdata
 8002710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002714:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002718:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800271c:	200004a4 	.word	0x200004a4

08002720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <HAL_Init+0x40>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_Init+0x40>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_Init+0x40>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f94d 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002752:	2000      	movs	r0, #0
 8002754:	f000 f808 	bl	8002768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002758:	f7ff fe52 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023c00 	.word	0x40023c00

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f965 	bl	8002a56 <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f92d 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000010 	.word	0x20000010
 80027c0:	20000018 	.word	0x20000018
 80027c4:	20000014 	.word	0x20000014

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000018 	.word	0x20000018
 80027ec:	2000049c 	.word	0x2000049c

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000049c 	.word	0x2000049c

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_Delay+0x40>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000018 	.word	0x20000018

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e00c      	b.n	8002aa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	e159      	b.n	8002d84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	f040 8148 	bne.w	8002d7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d00b      	beq.n	8002b0e <HAL_GPIO_Init+0x5a>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b02:	2b11      	cmp	r3, #17
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d130      	bne.n	8002b70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0xfc>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d123      	bne.n	8002bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0203 	and.w	r2, r3, #3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a2 	beq.w	8002d7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c56:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_GPIO_Init+0x2ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x202>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x1fe>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_GPIO_Init+0x2f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a45      	ldr	r2, [pc, #276]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x1f6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x1f2>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	e008      	b.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002caa:	2303      	movs	r3, #3
 8002cac:	e004      	b.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e002      	b.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	f002 0203 	and.w	r2, r2, #3
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc8:	4934      	ldr	r1, [pc, #208]	; (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cfa:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d00:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d24:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4e:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d54:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b0f      	cmp	r3, #15
 8002d88:	f67f aea2 	bls.w	8002ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3724      	adds	r7, #36	; 0x24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40013800 	.word	0x40013800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e25b      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3a:	4ba3      	ldr	r3, [pc, #652]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b9d      	ldr	r3, [pc, #628]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b99      	ldr	r3, [pc, #612]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e236      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8a      	ldr	r2, [pc, #552]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a87      	ldr	r2, [pc, #540]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a83      	ldr	r2, [pc, #524]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fc8c 	bl	80027f0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff fc88 	bl	80027f0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1fb      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7ff fc78 	bl	80027f0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7ff fc74 	bl	80027f0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1e7      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b5c      	ldr	r3, [pc, #368]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1bb      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4952      	ldr	r1, [pc, #328]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <HAL_RCC_OscConfig+0x2b0>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7ff fc2d 	bl	80027f0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7ff fc29 	bl	80027f0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e19c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4940      	ldr	r1, [pc, #256]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x2b0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fc0c 	bl	80027f0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7ff fc08 	bl	80027f0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e17b      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d030      	beq.n	8003068 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCC_OscConfig+0x2b4>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7ff fbec 	bl	80027f0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301c:	f7ff fbe8 	bl	80027f0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e15b      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
 800303a:	e015      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x2b4>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7ff fbd5 	bl	80027f0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7ff fbd1 	bl	80027f0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e144      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a0 	beq.w	80031b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d121      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7ff fb97 	bl	80027f0 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e011      	b.n	80030ea <HAL_RCC_OscConfig+0x2ce>
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
 80030d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7ff fb8a 	bl	80027f0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0fd      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <HAL_RCC_OscConfig+0x4d4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x2f0>
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	e01c      	b.n	8003146 <HAL_RCC_OscConfig+0x32a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x312>
 8003114:	4b77      	ldr	r3, [pc, #476]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a76      	ldr	r2, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a73      	ldr	r2, [pc, #460]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e00b      	b.n	8003146 <HAL_RCC_OscConfig+0x32a>
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a70      	ldr	r2, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a6d      	ldr	r2, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7ff fb4f 	bl	80027f0 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7ff fb4b 	bl	80027f0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0bc      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ee      	beq.n	8003156 <HAL_RCC_OscConfig+0x33a>
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7ff fb39 	bl	80027f0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7ff fb35 	bl	80027f0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0a6      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8092 	beq.w	80032e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d05c      	beq.n	8003286 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d141      	bne.n	8003258 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <HAL_RCC_OscConfig+0x4dc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7ff fb09 	bl	80027f0 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e2:	f7ff fb05 	bl	80027f0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e078      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	019b      	lsls	r3, r3, #6
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	4933      	ldr	r1, [pc, #204]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <HAL_RCC_OscConfig+0x4dc>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7ff fade 	bl	80027f0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7ff fada 	bl	80027f0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04d      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x41c>
 8003256:	e045      	b.n	80032e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_OscConfig+0x4dc>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7ff fac7 	bl	80027f0 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7ff fac3 	bl	80027f0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e036      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x44a>
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e029      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d115      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ba:	4013      	ands	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10d      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470060 	.word	0x42470060

080032fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0cc      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b68      	ldr	r3, [pc, #416]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d90c      	bls.n	8003338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800335a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d044      	beq.n	800341c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e067      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4934      	ldr	r1, [pc, #208]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7ff fa00 	bl	80027f0 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7ff f9fc 	bl	80027f0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20c      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f960 	bl	8002768 <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	080070d0 	.word	0x080070d0
 80034c0:	20000010 	.word	0x20000010
 80034c4:	20000014 	.word	0x20000014

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	2300      	movs	r3, #0
 80034d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d007      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x32>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d008      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x38>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 80b4 	bne.w	800365c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034f6:	60bb      	str	r3, [r7, #8]
       break;
 80034f8:	e0b3      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034fc:	60bb      	str	r3, [r7, #8]
      break;
 80034fe:	e0b0      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003508:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350a:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04a      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	4b55      	ldr	r3, [pc, #340]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	f04f 0400 	mov.w	r4, #0
 8003520:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	ea03 0501 	and.w	r5, r3, r1
 800352c:	ea04 0602 	and.w	r6, r4, r2
 8003530:	4629      	mov	r1, r5
 8003532:	4632      	mov	r2, r6
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f04f 0400 	mov.w	r4, #0
 800353c:	0154      	lsls	r4, r2, #5
 800353e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003542:	014b      	lsls	r3, r1, #5
 8003544:	4619      	mov	r1, r3
 8003546:	4622      	mov	r2, r4
 8003548:	1b49      	subs	r1, r1, r5
 800354a:	eb62 0206 	sbc.w	r2, r2, r6
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	0194      	lsls	r4, r2, #6
 8003558:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800355c:	018b      	lsls	r3, r1, #6
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	eb64 0402 	sbc.w	r4, r4, r2
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	00e2      	lsls	r2, r4, #3
 800356e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	460b      	mov	r3, r1
 8003576:	4614      	mov	r4, r2
 8003578:	195b      	adds	r3, r3, r5
 800357a:	eb44 0406 	adc.w	r4, r4, r6
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	0262      	lsls	r2, r4, #9
 8003588:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800358c:	0259      	lsls	r1, r3, #9
 800358e:	460b      	mov	r3, r1
 8003590:	4614      	mov	r4, r2
 8003592:	4618      	mov	r0, r3
 8003594:	4621      	mov	r1, r4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	461a      	mov	r2, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	f7fd fb6a 	bl	8000c78 <__aeabi_uldivmod>
 80035a4:	4603      	mov	r3, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e049      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ac:	4b2f      	ldr	r3, [pc, #188]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	f04f 0400 	mov.w	r4, #0
 80035b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	ea03 0501 	and.w	r5, r3, r1
 80035c2:	ea04 0602 	and.w	r6, r4, r2
 80035c6:	4629      	mov	r1, r5
 80035c8:	4632      	mov	r2, r6
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	0154      	lsls	r4, r2, #5
 80035d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d8:	014b      	lsls	r3, r1, #5
 80035da:	4619      	mov	r1, r3
 80035dc:	4622      	mov	r2, r4
 80035de:	1b49      	subs	r1, r1, r5
 80035e0:	eb62 0206 	sbc.w	r2, r2, r6
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	0194      	lsls	r4, r2, #6
 80035ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	1a5b      	subs	r3, r3, r1
 80035f6:	eb64 0402 	sbc.w	r4, r4, r2
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	00e2      	lsls	r2, r4, #3
 8003604:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003608:	00d9      	lsls	r1, r3, #3
 800360a:	460b      	mov	r3, r1
 800360c:	4614      	mov	r4, r2
 800360e:	195b      	adds	r3, r3, r5
 8003610:	eb44 0406 	adc.w	r4, r4, r6
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	02a2      	lsls	r2, r4, #10
 800361e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003622:	0299      	lsls	r1, r3, #10
 8003624:	460b      	mov	r3, r1
 8003626:	4614      	mov	r4, r2
 8003628:	4618      	mov	r0, r3
 800362a:	4621      	mov	r1, r4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f04f 0400 	mov.w	r4, #0
 8003632:	461a      	mov	r2, r3
 8003634:	4623      	mov	r3, r4
 8003636:	f7fd fb1f 	bl	8000c78 <__aeabi_uldivmod>
 800363a:	4603      	mov	r3, r0
 800363c:	460c      	mov	r4, r1
 800363e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	60bb      	str	r3, [r7, #8]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800365e:	60bb      	str	r3, [r7, #8]
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	68bb      	ldr	r3, [r7, #8]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000010 	.word	0x20000010

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4601      	mov	r1, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	080070e0 	.word	0x080070e0

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4601      	mov	r1, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4a03      	ldr	r2, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	080070e0 	.word	0x080070e0

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01d      	b.n	800372e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fe fea2 	bl	8002450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 f8c0 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_TIM_ConfigClockSource+0x18>
 800374a:	2302      	movs	r3, #2
 800374c:	e0a6      	b.n	800389c <HAL_TIM_ConfigClockSource+0x166>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003774:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d067      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x120>
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d80b      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x6c>
 800378a:	2b10      	cmp	r3, #16
 800378c:	d073      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x140>
 800378e:	2b10      	cmp	r3, #16
 8003790:	d802      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x62>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d06f      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003796:	e078      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003798:	2b20      	cmp	r3, #32
 800379a:	d06c      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x140>
 800379c:	2b30      	cmp	r3, #48	; 0x30
 800379e:	d06a      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037a0:	e073      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037a2:	2b70      	cmp	r3, #112	; 0x70
 80037a4:	d00d      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x8c>
 80037a6:	2b70      	cmp	r3, #112	; 0x70
 80037a8:	d804      	bhi.n	80037b4 <HAL_TIM_ConfigClockSource+0x7e>
 80037aa:	2b50      	cmp	r3, #80	; 0x50
 80037ac:	d033      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xe0>
 80037ae:	2b60      	cmp	r3, #96	; 0x60
 80037b0:	d041      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037b2:	e06a      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d066      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0x152>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	d017      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037c0:	e063      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f000 f961 	bl	8003a98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	609a      	str	r2, [r3, #8]
      break;
 80037ee:	e04c      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f000 f94a 	bl	8003a98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e039      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	461a      	mov	r2, r3
 8003824:	f000 f8be 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2150      	movs	r1, #80	; 0x50
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f917 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003834:	e029      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	461a      	mov	r2, r3
 8003844:	f000 f8dd 	bl	8003a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2160      	movs	r1, #96	; 0x60
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f907 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003854:	e019      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	461a      	mov	r2, r3
 8003864:	f000 f89e 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f8f7 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003874:	e009      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f000 f8ee 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003886:	e000      	b.n	800388a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003888:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a34      	ldr	r2, [pc, #208]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a31      	ldr	r2, [pc, #196]	; (800398c <TIM_Base_SetConfig+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <TIM_Base_SetConfig+0xec>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <TIM_Base_SetConfig+0xf0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d017      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <TIM_Base_SetConfig+0xe8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <TIM_Base_SetConfig+0xec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <TIM_Base_SetConfig+0xf0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <TIM_Base_SetConfig+0xf4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <TIM_Base_SetConfig+0xf8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_Base_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f043 0307 	orr.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e050      	b.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d013      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10c      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40014000 	.word	0x40014000

08003bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e03f      	b.n	8003c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fe fc5a 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb4b 	bl	8004294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b088      	sub	sp, #32
 8003c52:	af02      	add	r7, sp, #8
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	f040 8083 	bne.w	8003d76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x2e>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e07b      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Transmit+0x40>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e074      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2221      	movs	r2, #33	; 0x21
 8003ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fda4 	bl	80027f0 <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003cbe:	e042      	b.n	8003d46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d122      	bne.n	8003d1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f96a 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e042      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3302      	adds	r3, #2
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e017      	b.n	8003d46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e013      	b.n	8003d46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2180      	movs	r1, #128	; 0x80
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f947 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e01f      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1b7      	bne.n	8003cc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f92e 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e006      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10d      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x52>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9e0 	bl	8004190 <UART_Receive_IT>
      return;
 8003dd0:	e0d1      	b.n	8003f76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80b0 	beq.w	8003f3a <HAL_UART_IRQHandler+0x1ba>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_UART_IRQHandler+0x70>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a5 	beq.w	8003f3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_UART_IRQHandler+0x90>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	f043 0201 	orr.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_UART_IRQHandler+0xb0>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_UART_IRQHandler+0xd0>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00f      	beq.n	8003e7a <HAL_UART_IRQHandler+0xfa>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_UART_IRQHandler+0xee>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d078      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_UART_IRQHandler+0x11c>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f97a 	bl	8004190 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x144>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d031      	beq.n	8003f28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8c3 	bl	8004050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d123      	bne.n	8003f20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <HAL_UART_IRQHandler+0x1fc>)
 8003ef6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fdb6 	bl	8002a6e <HAL_DMA_Abort_IT>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f12:	4610      	mov	r0, r2
 8003f14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f16:	e00e      	b.n	8003f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f845 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1e:	e00a      	b.n	8003f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f841 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	e006      	b.n	8003f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f83d 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f34:	e01e      	b.n	8003f74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f36:	bf00      	nop
    return;
 8003f38:	e01c      	b.n	8003f74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x1d6>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8b0 	bl	80040b4 <UART_Transmit_IT>
    return;
 8003f54:	e00f      	b.n	8003f76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1f6>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8f8 	bl	8004160 <UART_EndTransmit_IT>
    return;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003f74:	bf00      	nop
  }
}
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	0800408d 	.word	0x0800408d

08003f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	e02c      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d028      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x30>
 8003fdc:	f7fe fc08 	bl	80027f0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d21d      	bcs.n	8004028 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ffa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e00f      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d0c3      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004066:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff7e 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b21      	cmp	r3, #33	; 0x21
 80040c6:	d144      	bne.n	8004152 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d11a      	bne.n	8004108 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]
 80040fa:	e00e      	b.n	800411a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]
 8004106:	e008      	b.n	800411a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6211      	str	r1, [r2, #32]
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4619      	mov	r1, r3
 8004128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004176:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fefd 	bl	8003f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b22      	cmp	r3, #34	; 0x22
 80041a2:	d171      	bne.n	8004288 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d123      	bne.n	80041f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10e      	bne.n	80041da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	e029      	b.n	800422e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
 80041f4:	e01b      	b.n	800422e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6858      	ldr	r0, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	1c59      	adds	r1, r3, #1
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6291      	str	r1, [r2, #40]	; 0x28
 800420e:	b2c2      	uxtb	r2, r0
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e00c      	b.n	800422e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	1c58      	adds	r0, r3, #1
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	6288      	str	r0, [r1, #40]	; 0x28
 8004226:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29b      	uxth	r3, r3
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800423e:	2b00      	cmp	r3, #0
 8004240:	d120      	bne.n	8004284 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0220 	bic.w	r2, r2, #32
 8004250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff fe8a 	bl	8003f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e002      	b.n	800428a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042d6:	f023 030c 	bic.w	r3, r3, #12
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	f040 818b 	bne.w	800461c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4ac1      	ldr	r2, [pc, #772]	; (8004610 <UART_SetConfig+0x37c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d005      	beq.n	800431c <UART_SetConfig+0x88>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4abf      	ldr	r2, [pc, #764]	; (8004614 <UART_SetConfig+0x380>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f040 80bd 	bne.w	8004496 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7ff f9cc 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8004320:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	461d      	mov	r5, r3
 8004326:	f04f 0600 	mov.w	r6, #0
 800432a:	46a8      	mov	r8, r5
 800432c:	46b1      	mov	r9, r6
 800432e:	eb18 0308 	adds.w	r3, r8, r8
 8004332:	eb49 0409 	adc.w	r4, r9, r9
 8004336:	4698      	mov	r8, r3
 8004338:	46a1      	mov	r9, r4
 800433a:	eb18 0805 	adds.w	r8, r8, r5
 800433e:	eb49 0906 	adc.w	r9, r9, r6
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800434e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004352:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004356:	4688      	mov	r8, r1
 8004358:	4691      	mov	r9, r2
 800435a:	eb18 0005 	adds.w	r0, r8, r5
 800435e:	eb49 0106 	adc.w	r1, r9, r6
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	461d      	mov	r5, r3
 8004368:	f04f 0600 	mov.w	r6, #0
 800436c:	196b      	adds	r3, r5, r5
 800436e:	eb46 0406 	adc.w	r4, r6, r6
 8004372:	461a      	mov	r2, r3
 8004374:	4623      	mov	r3, r4
 8004376:	f7fc fc7f 	bl	8000c78 <__aeabi_uldivmod>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	461a      	mov	r2, r3
 8004380:	4ba5      	ldr	r3, [pc, #660]	; (8004618 <UART_SetConfig+0x384>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	46a9      	mov	r9, r5
 8004396:	46b2      	mov	sl, r6
 8004398:	eb19 0309 	adds.w	r3, r9, r9
 800439c:	eb4a 040a 	adc.w	r4, sl, sl
 80043a0:	4699      	mov	r9, r3
 80043a2:	46a2      	mov	sl, r4
 80043a4:	eb19 0905 	adds.w	r9, r9, r5
 80043a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c0:	4689      	mov	r9, r1
 80043c2:	4692      	mov	sl, r2
 80043c4:	eb19 0005 	adds.w	r0, r9, r5
 80043c8:	eb4a 0106 	adc.w	r1, sl, r6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	196b      	adds	r3, r5, r5
 80043d8:	eb46 0406 	adc.w	r4, r6, r6
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fc fc4a 	bl	8000c78 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <UART_SetConfig+0x384>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a86      	ldr	r2, [pc, #536]	; (8004618 <UART_SetConfig+0x384>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800440c:	4498      	add	r8, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	461d      	mov	r5, r3
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	46a9      	mov	r9, r5
 8004418:	46b2      	mov	sl, r6
 800441a:	eb19 0309 	adds.w	r3, r9, r9
 800441e:	eb4a 040a 	adc.w	r4, sl, sl
 8004422:	4699      	mov	r9, r3
 8004424:	46a2      	mov	sl, r4
 8004426:	eb19 0905 	adds.w	r9, r9, r5
 800442a:	eb4a 0a06 	adc.w	sl, sl, r6
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800443e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004442:	4689      	mov	r9, r1
 8004444:	4692      	mov	sl, r2
 8004446:	eb19 0005 	adds.w	r0, r9, r5
 800444a:	eb4a 0106 	adc.w	r1, sl, r6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	461d      	mov	r5, r3
 8004454:	f04f 0600 	mov.w	r6, #0
 8004458:	196b      	adds	r3, r5, r5
 800445a:	eb46 0406 	adc.w	r4, r6, r6
 800445e:	461a      	mov	r2, r3
 8004460:	4623      	mov	r3, r4
 8004462:	f7fc fc09 	bl	8000c78 <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	461a      	mov	r2, r3
 800446c:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <UART_SetConfig+0x384>)
 800446e:	fba3 1302 	umull	r1, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2164      	movs	r1, #100	; 0x64
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a65      	ldr	r2, [pc, #404]	; (8004618 <UART_SetConfig+0x384>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 0207 	and.w	r2, r3, #7
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4442      	add	r2, r8
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	e26f      	b.n	8004976 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004496:	f7ff f8fb 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 800449a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	461d      	mov	r5, r3
 80044a0:	f04f 0600 	mov.w	r6, #0
 80044a4:	46a8      	mov	r8, r5
 80044a6:	46b1      	mov	r9, r6
 80044a8:	eb18 0308 	adds.w	r3, r8, r8
 80044ac:	eb49 0409 	adc.w	r4, r9, r9
 80044b0:	4698      	mov	r8, r3
 80044b2:	46a1      	mov	r9, r4
 80044b4:	eb18 0805 	adds.w	r8, r8, r5
 80044b8:	eb49 0906 	adc.w	r9, r9, r6
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044d0:	4688      	mov	r8, r1
 80044d2:	4691      	mov	r9, r2
 80044d4:	eb18 0005 	adds.w	r0, r8, r5
 80044d8:	eb49 0106 	adc.w	r1, r9, r6
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	461d      	mov	r5, r3
 80044e2:	f04f 0600 	mov.w	r6, #0
 80044e6:	196b      	adds	r3, r5, r5
 80044e8:	eb46 0406 	adc.w	r4, r6, r6
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	f7fc fbc2 	bl	8000c78 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <UART_SetConfig+0x384>)
 80044fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	461d      	mov	r5, r3
 800450a:	f04f 0600 	mov.w	r6, #0
 800450e:	46a9      	mov	r9, r5
 8004510:	46b2      	mov	sl, r6
 8004512:	eb19 0309 	adds.w	r3, r9, r9
 8004516:	eb4a 040a 	adc.w	r4, sl, sl
 800451a:	4699      	mov	r9, r3
 800451c:	46a2      	mov	sl, r4
 800451e:	eb19 0905 	adds.w	r9, r9, r5
 8004522:	eb4a 0a06 	adc.w	sl, sl, r6
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453a:	4689      	mov	r9, r1
 800453c:	4692      	mov	sl, r2
 800453e:	eb19 0005 	adds.w	r0, r9, r5
 8004542:	eb4a 0106 	adc.w	r1, sl, r6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	461d      	mov	r5, r3
 800454c:	f04f 0600 	mov.w	r6, #0
 8004550:	196b      	adds	r3, r5, r5
 8004552:	eb46 0406 	adc.w	r4, r6, r6
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	f7fc fb8d 	bl	8000c78 <__aeabi_uldivmod>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	461a      	mov	r2, r3
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <UART_SetConfig+0x384>)
 8004566:	fba3 1302 	umull	r1, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2164      	movs	r1, #100	; 0x64
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <UART_SetConfig+0x384>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004586:	4498      	add	r8, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	461d      	mov	r5, r3
 800458c:	f04f 0600 	mov.w	r6, #0
 8004590:	46a9      	mov	r9, r5
 8004592:	46b2      	mov	sl, r6
 8004594:	eb19 0309 	adds.w	r3, r9, r9
 8004598:	eb4a 040a 	adc.w	r4, sl, sl
 800459c:	4699      	mov	r9, r3
 800459e:	46a2      	mov	sl, r4
 80045a0:	eb19 0905 	adds.w	r9, r9, r5
 80045a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045bc:	4689      	mov	r9, r1
 80045be:	4692      	mov	sl, r2
 80045c0:	eb19 0005 	adds.w	r0, r9, r5
 80045c4:	eb4a 0106 	adc.w	r1, sl, r6
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	461d      	mov	r5, r3
 80045ce:	f04f 0600 	mov.w	r6, #0
 80045d2:	196b      	adds	r3, r5, r5
 80045d4:	eb46 0406 	adc.w	r4, r6, r6
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	f7fc fb4c 	bl	8000c78 <__aeabi_uldivmod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <UART_SetConfig+0x384>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <UART_SetConfig+0x384>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0207 	and.w	r2, r3, #7
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4442      	add	r2, r8
 800460c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800460e:	e1b2      	b.n	8004976 <UART_SetConfig+0x6e2>
 8004610:	40011000 	.word	0x40011000
 8004614:	40011400 	.word	0x40011400
 8004618:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4ad7      	ldr	r2, [pc, #860]	; (8004980 <UART_SetConfig+0x6ec>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d005      	beq.n	8004632 <UART_SetConfig+0x39e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4ad6      	ldr	r2, [pc, #856]	; (8004984 <UART_SetConfig+0x6f0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	f040 80d1 	bne.w	80047d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004632:	f7ff f841 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8004636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	469a      	mov	sl, r3
 800463c:	f04f 0b00 	mov.w	fp, #0
 8004640:	46d0      	mov	r8, sl
 8004642:	46d9      	mov	r9, fp
 8004644:	eb18 0308 	adds.w	r3, r8, r8
 8004648:	eb49 0409 	adc.w	r4, r9, r9
 800464c:	4698      	mov	r8, r3
 800464e:	46a1      	mov	r9, r4
 8004650:	eb18 080a 	adds.w	r8, r8, sl
 8004654:	eb49 090b 	adc.w	r9, r9, fp
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800466c:	4688      	mov	r8, r1
 800466e:	4691      	mov	r9, r2
 8004670:	eb1a 0508 	adds.w	r5, sl, r8
 8004674:	eb4b 0609 	adc.w	r6, fp, r9
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	f04f 0400 	mov.w	r4, #0
 800468a:	0094      	lsls	r4, r2, #2
 800468c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004690:	008b      	lsls	r3, r1, #2
 8004692:	461a      	mov	r2, r3
 8004694:	4623      	mov	r3, r4
 8004696:	4628      	mov	r0, r5
 8004698:	4631      	mov	r1, r6
 800469a:	f7fc faed 	bl	8000c78 <__aeabi_uldivmod>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	461a      	mov	r2, r3
 80046a4:	4bb8      	ldr	r3, [pc, #736]	; (8004988 <UART_SetConfig+0x6f4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	469b      	mov	fp, r3
 80046b4:	f04f 0c00 	mov.w	ip, #0
 80046b8:	46d9      	mov	r9, fp
 80046ba:	46e2      	mov	sl, ip
 80046bc:	eb19 0309 	adds.w	r3, r9, r9
 80046c0:	eb4a 040a 	adc.w	r4, sl, sl
 80046c4:	4699      	mov	r9, r3
 80046c6:	46a2      	mov	sl, r4
 80046c8:	eb19 090b 	adds.w	r9, r9, fp
 80046cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e4:	4689      	mov	r9, r1
 80046e6:	4692      	mov	sl, r2
 80046e8:	eb1b 0509 	adds.w	r5, fp, r9
 80046ec:	eb4c 060a 	adc.w	r6, ip, sl
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	0094      	lsls	r4, r2, #2
 8004704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	4628      	mov	r0, r5
 8004710:	4631      	mov	r1, r6
 8004712:	f7fc fab1 	bl	8000c78 <__aeabi_uldivmod>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	461a      	mov	r2, r3
 800471c:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <UART_SetConfig+0x6f4>)
 800471e:	fba3 1302 	umull	r1, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2164      	movs	r1, #100	; 0x64
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a95      	ldr	r2, [pc, #596]	; (8004988 <UART_SetConfig+0x6f4>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4498      	add	r8, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	469b      	mov	fp, r3
 8004742:	f04f 0c00 	mov.w	ip, #0
 8004746:	46d9      	mov	r9, fp
 8004748:	46e2      	mov	sl, ip
 800474a:	eb19 0309 	adds.w	r3, r9, r9
 800474e:	eb4a 040a 	adc.w	r4, sl, sl
 8004752:	4699      	mov	r9, r3
 8004754:	46a2      	mov	sl, r4
 8004756:	eb19 090b 	adds.w	r9, r9, fp
 800475a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800476e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004772:	4689      	mov	r9, r1
 8004774:	4692      	mov	sl, r2
 8004776:	eb1b 0509 	adds.w	r5, fp, r9
 800477a:	eb4c 060a 	adc.w	r6, ip, sl
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4619      	mov	r1, r3
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	f04f 0400 	mov.w	r4, #0
 8004790:	0094      	lsls	r4, r2, #2
 8004792:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004796:	008b      	lsls	r3, r1, #2
 8004798:	461a      	mov	r2, r3
 800479a:	4623      	mov	r3, r4
 800479c:	4628      	mov	r0, r5
 800479e:	4631      	mov	r1, r6
 80047a0:	f7fc fa6a 	bl	8000c78 <__aeabi_uldivmod>
 80047a4:	4603      	mov	r3, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <UART_SetConfig+0x6f4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	; 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	; 0x32
 80047be:	4a72      	ldr	r2, [pc, #456]	; (8004988 <UART_SetConfig+0x6f4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4442      	add	r2, r8
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	e0d0      	b.n	8004976 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe ff5c 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80047d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	469a      	mov	sl, r3
 80047de:	f04f 0b00 	mov.w	fp, #0
 80047e2:	46d0      	mov	r8, sl
 80047e4:	46d9      	mov	r9, fp
 80047e6:	eb18 0308 	adds.w	r3, r8, r8
 80047ea:	eb49 0409 	adc.w	r4, r9, r9
 80047ee:	4698      	mov	r8, r3
 80047f0:	46a1      	mov	r9, r4
 80047f2:	eb18 080a 	adds.w	r8, r8, sl
 80047f6:	eb49 090b 	adc.w	r9, r9, fp
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004806:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800480a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800480e:	4688      	mov	r8, r1
 8004810:	4691      	mov	r9, r2
 8004812:	eb1a 0508 	adds.w	r5, sl, r8
 8004816:	eb4b 0609 	adc.w	r6, fp, r9
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4619      	mov	r1, r3
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	0094      	lsls	r4, r2, #2
 800482e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	4628      	mov	r0, r5
 800483a:	4631      	mov	r1, r6
 800483c:	f7fc fa1c 	bl	8000c78 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b50      	ldr	r3, [pc, #320]	; (8004988 <UART_SetConfig+0x6f4>)
 8004848:	fba3 2302 	umull	r2, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	469b      	mov	fp, r3
 8004856:	f04f 0c00 	mov.w	ip, #0
 800485a:	46d9      	mov	r9, fp
 800485c:	46e2      	mov	sl, ip
 800485e:	eb19 0309 	adds.w	r3, r9, r9
 8004862:	eb4a 040a 	adc.w	r4, sl, sl
 8004866:	4699      	mov	r9, r3
 8004868:	46a2      	mov	sl, r4
 800486a:	eb19 090b 	adds.w	r9, r9, fp
 800486e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800487e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004886:	4689      	mov	r9, r1
 8004888:	4692      	mov	sl, r2
 800488a:	eb1b 0509 	adds.w	r5, fp, r9
 800488e:	eb4c 060a 	adc.w	r6, ip, sl
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4619      	mov	r1, r3
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	0094      	lsls	r4, r2, #2
 80048a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	4631      	mov	r1, r6
 80048b4:	f7fc f9e0 	bl	8000c78 <__aeabi_uldivmod>
 80048b8:	4603      	mov	r3, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	461a      	mov	r2, r3
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <UART_SetConfig+0x6f4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <UART_SetConfig+0x6f4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048de:	4498      	add	r8, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	469b      	mov	fp, r3
 80048e4:	f04f 0c00 	mov.w	ip, #0
 80048e8:	46d9      	mov	r9, fp
 80048ea:	46e2      	mov	sl, ip
 80048ec:	eb19 0309 	adds.w	r3, r9, r9
 80048f0:	eb4a 040a 	adc.w	r4, sl, sl
 80048f4:	4699      	mov	r9, r3
 80048f6:	46a2      	mov	sl, r4
 80048f8:	eb19 090b 	adds.w	r9, r9, fp
 80048fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004914:	4689      	mov	r9, r1
 8004916:	4692      	mov	sl, r2
 8004918:	eb1b 0509 	adds.w	r5, fp, r9
 800491c:	eb4c 060a 	adc.w	r6, ip, sl
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	f04f 0400 	mov.w	r4, #0
 8004932:	0094      	lsls	r4, r2, #2
 8004934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004938:	008b      	lsls	r3, r1, #2
 800493a:	461a      	mov	r2, r3
 800493c:	4623      	mov	r3, r4
 800493e:	4628      	mov	r0, r5
 8004940:	4631      	mov	r1, r6
 8004942:	f7fc f999 	bl	8000c78 <__aeabi_uldivmod>
 8004946:	4603      	mov	r3, r0
 8004948:	460c      	mov	r4, r1
 800494a:	461a      	mov	r2, r3
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <UART_SetConfig+0x6f4>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <UART_SetConfig+0x6f4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4442      	add	r2, r8
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	e7ff      	b.n	8004976 <UART_SetConfig+0x6e2>
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004980:	40011000 	.word	0x40011000
 8004984:	40011400 	.word	0x40011400
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000001c 	.word	0x2000001c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4e0d      	ldr	r6, [pc, #52]	; (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 800499e:	1ba4      	subs	r4, r4, r6
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2500      	movs	r5, #0
 80049a4:	42a5      	cmp	r5, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4e0b      	ldr	r6, [pc, #44]	; (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	; (80049dc <__libc_init_array+0x44>)
 80049ac:	f002 f86c 	bl	8006a88 <_init>
 80049b0:	1ba4      	subs	r4, r4, r6
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2500      	movs	r5, #0
 80049b6:	42a5      	cmp	r5, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c0:	4798      	blx	r3
 80049c2:	3501      	adds	r5, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ca:	4798      	blx	r3
 80049cc:	3501      	adds	r5, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08007350 	.word	0x08007350
 80049d4:	08007350 	.word	0x08007350
 80049d8:	08007350 	.word	0x08007350
 80049dc:	08007354 	.word	0x08007354

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <__cvt>:
 80049f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	ec55 4b10 	vmov	r4, r5, d0
 80049f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80049fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	460e      	mov	r6, r1
 8004a02:	4691      	mov	r9, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4622      	movlt	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	f027 0720 	bic.w	r7, r7, #32
 8004a10:	bfbb      	ittet	lt
 8004a12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a16:	461d      	movlt	r5, r3
 8004a18:	2300      	movge	r3, #0
 8004a1a:	232d      	movlt	r3, #45	; 0x2d
 8004a1c:	bfb8      	it	lt
 8004a1e:	4614      	movlt	r4, r2
 8004a20:	2f46      	cmp	r7, #70	; 0x46
 8004a22:	700b      	strb	r3, [r1, #0]
 8004a24:	d004      	beq.n	8004a30 <__cvt+0x40>
 8004a26:	2f45      	cmp	r7, #69	; 0x45
 8004a28:	d100      	bne.n	8004a2c <__cvt+0x3c>
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	e000      	b.n	8004a32 <__cvt+0x42>
 8004a30:	2103      	movs	r1, #3
 8004a32:	ab03      	add	r3, sp, #12
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	ab02      	add	r3, sp, #8
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	4653      	mov	r3, sl
 8004a3e:	ec45 4b10 	vmov	d0, r4, r5
 8004a42:	f000 fced 	bl	8005420 <_dtoa_r>
 8004a46:	2f47      	cmp	r7, #71	; 0x47
 8004a48:	4680      	mov	r8, r0
 8004a4a:	d102      	bne.n	8004a52 <__cvt+0x62>
 8004a4c:	f019 0f01 	tst.w	r9, #1
 8004a50:	d026      	beq.n	8004aa0 <__cvt+0xb0>
 8004a52:	2f46      	cmp	r7, #70	; 0x46
 8004a54:	eb08 0906 	add.w	r9, r8, r6
 8004a58:	d111      	bne.n	8004a7e <__cvt+0x8e>
 8004a5a:	f898 3000 	ldrb.w	r3, [r8]
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d10a      	bne.n	8004a78 <__cvt+0x88>
 8004a62:	2200      	movs	r2, #0
 8004a64:	2300      	movs	r3, #0
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fc f845 	bl	8000af8 <__aeabi_dcmpeq>
 8004a6e:	b918      	cbnz	r0, 8004a78 <__cvt+0x88>
 8004a70:	f1c6 0601 	rsb	r6, r6, #1
 8004a74:	f8ca 6000 	str.w	r6, [sl]
 8004a78:	f8da 3000 	ldr.w	r3, [sl]
 8004a7c:	4499      	add	r9, r3
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4620      	mov	r0, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	f7fc f837 	bl	8000af8 <__aeabi_dcmpeq>
 8004a8a:	b938      	cbnz	r0, 8004a9c <__cvt+0xac>
 8004a8c:	2230      	movs	r2, #48	; 0x30
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	454b      	cmp	r3, r9
 8004a92:	d205      	bcs.n	8004aa0 <__cvt+0xb0>
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	9103      	str	r1, [sp, #12]
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e7f8      	b.n	8004a8e <__cvt+0x9e>
 8004a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004aa0:	9b03      	ldr	r3, [sp, #12]
 8004aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aa4:	eba3 0308 	sub.w	r3, r3, r8
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	b004      	add	sp, #16
 8004aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ab2 <__exponent>:
 8004ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	bfba      	itte	lt
 8004aba:	4249      	neglt	r1, r1
 8004abc:	232d      	movlt	r3, #45	; 0x2d
 8004abe:	232b      	movge	r3, #43	; 0x2b
 8004ac0:	2909      	cmp	r1, #9
 8004ac2:	f804 2b02 	strb.w	r2, [r4], #2
 8004ac6:	7043      	strb	r3, [r0, #1]
 8004ac8:	dd20      	ble.n	8004b0c <__exponent+0x5a>
 8004aca:	f10d 0307 	add.w	r3, sp, #7
 8004ace:	461f      	mov	r7, r3
 8004ad0:	260a      	movs	r6, #10
 8004ad2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ad6:	fb06 1115 	mls	r1, r6, r5, r1
 8004ada:	3130      	adds	r1, #48	; 0x30
 8004adc:	2d09      	cmp	r5, #9
 8004ade:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ae2:	f103 32ff 	add.w	r2, r3, #4294967295
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	dc09      	bgt.n	8004afe <__exponent+0x4c>
 8004aea:	3130      	adds	r1, #48	; 0x30
 8004aec:	3b02      	subs	r3, #2
 8004aee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004af2:	42bb      	cmp	r3, r7
 8004af4:	4622      	mov	r2, r4
 8004af6:	d304      	bcc.n	8004b02 <__exponent+0x50>
 8004af8:	1a10      	subs	r0, r2, r0
 8004afa:	b003      	add	sp, #12
 8004afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004afe:	4613      	mov	r3, r2
 8004b00:	e7e7      	b.n	8004ad2 <__exponent+0x20>
 8004b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b06:	f804 2b01 	strb.w	r2, [r4], #1
 8004b0a:	e7f2      	b.n	8004af2 <__exponent+0x40>
 8004b0c:	2330      	movs	r3, #48	; 0x30
 8004b0e:	4419      	add	r1, r3
 8004b10:	7083      	strb	r3, [r0, #2]
 8004b12:	1d02      	adds	r2, r0, #4
 8004b14:	70c1      	strb	r1, [r0, #3]
 8004b16:	e7ef      	b.n	8004af8 <__exponent+0x46>

08004b18 <_printf_float>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	b08d      	sub	sp, #52	; 0x34
 8004b1e:	460c      	mov	r4, r1
 8004b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004b24:	4616      	mov	r6, r2
 8004b26:	461f      	mov	r7, r3
 8004b28:	4605      	mov	r5, r0
 8004b2a:	f001 fa31 	bl	8005f90 <_localeconv_r>
 8004b2e:	6803      	ldr	r3, [r0, #0]
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fb fb5e 	bl	80001f4 <strlen>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8004b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b40:	9005      	str	r0, [sp, #20]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	f103 0208 	add.w	r2, r3, #8
 8004b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b50:	f8d4 b000 	ldr.w	fp, [r4]
 8004b54:	f8c8 2000 	str.w	r2, [r8]
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b72:	4ba7      	ldr	r3, [pc, #668]	; (8004e10 <_printf_float+0x2f8>)
 8004b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b78:	f7fb fff0 	bl	8000b5c <__aeabi_dcmpun>
 8004b7c:	bb70      	cbnz	r0, 8004bdc <_printf_float+0xc4>
 8004b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b82:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <_printf_float+0x2f8>)
 8004b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b88:	f7fb ffca 	bl	8000b20 <__aeabi_dcmple>
 8004b8c:	bb30      	cbnz	r0, 8004bdc <_printf_float+0xc4>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2300      	movs	r3, #0
 8004b92:	4640      	mov	r0, r8
 8004b94:	4649      	mov	r1, r9
 8004b96:	f7fb ffb9 	bl	8000b0c <__aeabi_dcmplt>
 8004b9a:	b110      	cbz	r0, 8004ba2 <_printf_float+0x8a>
 8004b9c:	232d      	movs	r3, #45	; 0x2d
 8004b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba2:	4a9c      	ldr	r2, [pc, #624]	; (8004e14 <_printf_float+0x2fc>)
 8004ba4:	4b9c      	ldr	r3, [pc, #624]	; (8004e18 <_printf_float+0x300>)
 8004ba6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004baa:	bf8c      	ite	hi
 8004bac:	4690      	movhi	r8, r2
 8004bae:	4698      	movls	r8, r3
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	f02b 0204 	bic.w	r2, fp, #4
 8004bb6:	6123      	str	r3, [r4, #16]
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	9700      	str	r7, [sp, #0]
 8004bc0:	4633      	mov	r3, r6
 8004bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f9e6 	bl	8004f98 <_printf_common>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f040 808d 	bne.w	8004cec <_printf_float+0x1d4>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	b00d      	add	sp, #52	; 0x34
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	4640      	mov	r0, r8
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb ffba 	bl	8000b5c <__aeabi_dcmpun>
 8004be8:	b110      	cbz	r0, 8004bf0 <_printf_float+0xd8>
 8004bea:	4a8c      	ldr	r2, [pc, #560]	; (8004e1c <_printf_float+0x304>)
 8004bec:	4b8c      	ldr	r3, [pc, #560]	; (8004e20 <_printf_float+0x308>)
 8004bee:	e7da      	b.n	8004ba6 <_printf_float+0x8e>
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	1c4b      	adds	r3, r1, #1
 8004bf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004bf8:	a80a      	add	r0, sp, #40	; 0x28
 8004bfa:	d13e      	bne.n	8004c7a <_printf_float+0x162>
 8004bfc:	2306      	movs	r3, #6
 8004bfe:	6063      	str	r3, [r4, #4]
 8004c00:	2300      	movs	r3, #0
 8004c02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c06:	ab09      	add	r3, sp, #36	; 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	ec49 8b10 	vmov	d0, r8, r9
 8004c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	f8cd a004 	str.w	sl, [sp, #4]
 8004c18:	6861      	ldr	r1, [r4, #4]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7ff fee8 	bl	80049f0 <__cvt>
 8004c20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004c24:	2b47      	cmp	r3, #71	; 0x47
 8004c26:	4680      	mov	r8, r0
 8004c28:	d109      	bne.n	8004c3e <_printf_float+0x126>
 8004c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2c:	1cd8      	adds	r0, r3, #3
 8004c2e:	db02      	blt.n	8004c36 <_printf_float+0x11e>
 8004c30:	6862      	ldr	r2, [r4, #4]
 8004c32:	4293      	cmp	r3, r2
 8004c34:	dd47      	ble.n	8004cc6 <_printf_float+0x1ae>
 8004c36:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8004c3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c44:	d824      	bhi.n	8004c90 <_printf_float+0x178>
 8004c46:	3901      	subs	r1, #1
 8004c48:	4652      	mov	r2, sl
 8004c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c4e:	9109      	str	r1, [sp, #36]	; 0x24
 8004c50:	f7ff ff2f 	bl	8004ab2 <__exponent>
 8004c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c56:	1813      	adds	r3, r2, r0
 8004c58:	2a01      	cmp	r2, #1
 8004c5a:	4681      	mov	r9, r0
 8004c5c:	6123      	str	r3, [r4, #16]
 8004c5e:	dc02      	bgt.n	8004c66 <_printf_float+0x14e>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	07d1      	lsls	r1, r2, #31
 8004c64:	d501      	bpl.n	8004c6a <_printf_float+0x152>
 8004c66:	3301      	adds	r3, #1
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0a5      	beq.n	8004bbe <_printf_float+0xa6>
 8004c72:	232d      	movs	r3, #45	; 0x2d
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	e7a1      	b.n	8004bbe <_printf_float+0xa6>
 8004c7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004c7e:	f000 8177 	beq.w	8004f70 <_printf_float+0x458>
 8004c82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004c86:	d1bb      	bne.n	8004c00 <_printf_float+0xe8>
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d1b9      	bne.n	8004c00 <_printf_float+0xe8>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e7b6      	b.n	8004bfe <_printf_float+0xe6>
 8004c90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004c94:	d119      	bne.n	8004cca <_printf_float+0x1b2>
 8004c96:	2900      	cmp	r1, #0
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	dd0c      	ble.n	8004cb6 <_printf_float+0x19e>
 8004c9c:	6121      	str	r1, [r4, #16]
 8004c9e:	b913      	cbnz	r3, 8004ca6 <_printf_float+0x18e>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	07d2      	lsls	r2, r2, #31
 8004ca4:	d502      	bpl.n	8004cac <_printf_float+0x194>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	440b      	add	r3, r1
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cb0:	f04f 0900 	mov.w	r9, #0
 8004cb4:	e7d9      	b.n	8004c6a <_printf_float+0x152>
 8004cb6:	b913      	cbnz	r3, 8004cbe <_printf_float+0x1a6>
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	07d0      	lsls	r0, r2, #31
 8004cbc:	d501      	bpl.n	8004cc2 <_printf_float+0x1aa>
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	e7f3      	b.n	8004caa <_printf_float+0x192>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e7f1      	b.n	8004caa <_printf_float+0x192>
 8004cc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	db05      	blt.n	8004cde <_printf_float+0x1c6>
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	07d1      	lsls	r1, r2, #31
 8004cd8:	d5e8      	bpl.n	8004cac <_printf_float+0x194>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	e7e5      	b.n	8004caa <_printf_float+0x192>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfd4      	ite	le
 8004ce2:	f1c3 0302 	rsble	r3, r3, #2
 8004ce6:	2301      	movgt	r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	e7de      	b.n	8004caa <_printf_float+0x192>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	055a      	lsls	r2, r3, #21
 8004cf0:	d407      	bmi.n	8004d02 <_printf_float+0x1ea>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d12b      	bne.n	8004d58 <_printf_float+0x240>
 8004d00:	e767      	b.n	8004bd2 <_printf_float+0xba>
 8004d02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d06:	f240 80dc 	bls.w	8004ec2 <_printf_float+0x3aa>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d12:	f7fb fef1 	bl	8000af8 <__aeabi_dcmpeq>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d033      	beq.n	8004d82 <_printf_float+0x26a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4a41      	ldr	r2, [pc, #260]	; (8004e24 <_printf_float+0x30c>)
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f af54 	beq.w	8004bd2 <_printf_float+0xba>
 8004d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	db02      	blt.n	8004d38 <_printf_float+0x220>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	07d8      	lsls	r0, r3, #31
 8004d36:	d50f      	bpl.n	8004d58 <_printf_float+0x240>
 8004d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af45 	beq.w	8004bd2 <_printf_float+0xba>
 8004d48:	f04f 0800 	mov.w	r8, #0
 8004d4c:	f104 091a 	add.w	r9, r4, #26
 8004d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	4543      	cmp	r3, r8
 8004d56:	dc09      	bgt.n	8004d6c <_printf_float+0x254>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	079b      	lsls	r3, r3, #30
 8004d5c:	f100 8103 	bmi.w	8004f66 <_printf_float+0x44e>
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d64:	4298      	cmp	r0, r3
 8004d66:	bfb8      	it	lt
 8004d68:	4618      	movlt	r0, r3
 8004d6a:	e734      	b.n	8004bd6 <_printf_float+0xbe>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	464a      	mov	r2, r9
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f af2b 	beq.w	8004bd2 <_printf_float+0xba>
 8004d7c:	f108 0801 	add.w	r8, r8, #1
 8004d80:	e7e6      	b.n	8004d50 <_printf_float+0x238>
 8004d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dc2b      	bgt.n	8004de0 <_printf_float+0x2c8>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <_printf_float+0x30c>)
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	f43f af1d 	beq.w	8004bd2 <_printf_float+0xba>
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	b923      	cbnz	r3, 8004da6 <_printf_float+0x28e>
 8004d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d9e:	b913      	cbnz	r3, 8004da6 <_printf_float+0x28e>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	07d9      	lsls	r1, r3, #31
 8004da4:	d5d8      	bpl.n	8004d58 <_printf_float+0x240>
 8004da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f af0e 	beq.w	8004bd2 <_printf_float+0xba>
 8004db6:	f04f 0900 	mov.w	r9, #0
 8004dba:	f104 0a1a 	add.w	sl, r4, #26
 8004dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	454b      	cmp	r3, r9
 8004dc4:	dc01      	bgt.n	8004dca <_printf_float+0x2b2>
 8004dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc8:	e794      	b.n	8004cf4 <_printf_float+0x1dc>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f aefc 	beq.w	8004bd2 <_printf_float+0xba>
 8004dda:	f109 0901 	add.w	r9, r9, #1
 8004dde:	e7ee      	b.n	8004dbe <_printf_float+0x2a6>
 8004de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bfa8      	it	ge
 8004de8:	461a      	movge	r2, r3
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	4691      	mov	r9, r2
 8004dee:	dd07      	ble.n	8004e00 <_printf_float+0x2e8>
 8004df0:	4613      	mov	r3, r2
 8004df2:	4631      	mov	r1, r6
 8004df4:	4642      	mov	r2, r8
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f aee9 	beq.w	8004bd2 <_printf_float+0xba>
 8004e00:	f104 031a 	add.w	r3, r4, #26
 8004e04:	f04f 0b00 	mov.w	fp, #0
 8004e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e0c:	9306      	str	r3, [sp, #24]
 8004e0e:	e015      	b.n	8004e3c <_printf_float+0x324>
 8004e10:	7fefffff 	.word	0x7fefffff
 8004e14:	080070ec 	.word	0x080070ec
 8004e18:	080070e8 	.word	0x080070e8
 8004e1c:	080070f4 	.word	0x080070f4
 8004e20:	080070f0 	.word	0x080070f0
 8004e24:	080070f8 	.word	0x080070f8
 8004e28:	2301      	movs	r3, #1
 8004e2a:	9a06      	ldr	r2, [sp, #24]
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f aecd 	beq.w	8004bd2 <_printf_float+0xba>
 8004e38:	f10b 0b01 	add.w	fp, fp, #1
 8004e3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e40:	ebaa 0309 	sub.w	r3, sl, r9
 8004e44:	455b      	cmp	r3, fp
 8004e46:	dcef      	bgt.n	8004e28 <_printf_float+0x310>
 8004e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	44d0      	add	r8, sl
 8004e50:	db15      	blt.n	8004e7e <_printf_float+0x366>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	07da      	lsls	r2, r3, #31
 8004e56:	d412      	bmi.n	8004e7e <_printf_float+0x366>
 8004e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e5c:	eba3 020a 	sub.w	r2, r3, sl
 8004e60:	eba3 0a01 	sub.w	sl, r3, r1
 8004e64:	4592      	cmp	sl, r2
 8004e66:	bfa8      	it	ge
 8004e68:	4692      	movge	sl, r2
 8004e6a:	f1ba 0f00 	cmp.w	sl, #0
 8004e6e:	dc0e      	bgt.n	8004e8e <_printf_float+0x376>
 8004e70:	f04f 0800 	mov.w	r8, #0
 8004e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e78:	f104 091a 	add.w	r9, r4, #26
 8004e7c:	e019      	b.n	8004eb2 <_printf_float+0x39a>
 8004e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d1e5      	bne.n	8004e58 <_printf_float+0x340>
 8004e8c:	e6a1      	b.n	8004bd2 <_printf_float+0xba>
 8004e8e:	4653      	mov	r3, sl
 8004e90:	4642      	mov	r2, r8
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1e9      	bne.n	8004e70 <_printf_float+0x358>
 8004e9c:	e699      	b.n	8004bd2 <_printf_float+0xba>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae92 	beq.w	8004bd2 <_printf_float+0xba>
 8004eae:	f108 0801 	add.w	r8, r8, #1
 8004eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	eba3 030a 	sub.w	r3, r3, sl
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	dcee      	bgt.n	8004e9e <_printf_float+0x386>
 8004ec0:	e74a      	b.n	8004d58 <_printf_float+0x240>
 8004ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ec4:	2a01      	cmp	r2, #1
 8004ec6:	dc01      	bgt.n	8004ecc <_printf_float+0x3b4>
 8004ec8:	07db      	lsls	r3, r3, #31
 8004eca:	d53a      	bpl.n	8004f42 <_printf_float+0x42a>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4642      	mov	r2, r8
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f ae7b 	beq.w	8004bd2 <_printf_float+0xba>
 8004edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	f108 0801 	add.w	r8, r8, #1
 8004eec:	f43f ae71 	beq.w	8004bd2 <_printf_float+0xba>
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f103 3aff 	add.w	sl, r3, #4294967295
 8004ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004efc:	2300      	movs	r3, #0
 8004efe:	f7fb fdfb 	bl	8000af8 <__aeabi_dcmpeq>
 8004f02:	b9c8      	cbnz	r0, 8004f38 <_printf_float+0x420>
 8004f04:	4653      	mov	r3, sl
 8004f06:	4642      	mov	r2, r8
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d10e      	bne.n	8004f30 <_printf_float+0x418>
 8004f12:	e65e      	b.n	8004bd2 <_printf_float+0xba>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4652      	mov	r2, sl
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f ae57 	beq.w	8004bd2 <_printf_float+0xba>
 8004f24:	f108 0801 	add.w	r8, r8, #1
 8004f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	4543      	cmp	r3, r8
 8004f2e:	dcf1      	bgt.n	8004f14 <_printf_float+0x3fc>
 8004f30:	464b      	mov	r3, r9
 8004f32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f36:	e6de      	b.n	8004cf6 <_printf_float+0x1de>
 8004f38:	f04f 0800 	mov.w	r8, #0
 8004f3c:	f104 0a1a 	add.w	sl, r4, #26
 8004f40:	e7f2      	b.n	8004f28 <_printf_float+0x410>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7df      	b.n	8004f06 <_printf_float+0x3ee>
 8004f46:	2301      	movs	r3, #1
 8004f48:	464a      	mov	r2, r9
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	f43f ae3e 	beq.w	8004bd2 <_printf_float+0xba>
 8004f56:	f108 0801 	add.w	r8, r8, #1
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	4543      	cmp	r3, r8
 8004f62:	dcf0      	bgt.n	8004f46 <_printf_float+0x42e>
 8004f64:	e6fc      	b.n	8004d60 <_printf_float+0x248>
 8004f66:	f04f 0800 	mov.w	r8, #0
 8004f6a:	f104 0919 	add.w	r9, r4, #25
 8004f6e:	e7f4      	b.n	8004f5a <_printf_float+0x442>
 8004f70:	2900      	cmp	r1, #0
 8004f72:	f43f ae8b 	beq.w	8004c8c <_printf_float+0x174>
 8004f76:	2300      	movs	r3, #0
 8004f78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004f7c:	ab09      	add	r3, sp, #36	; 0x24
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	ec49 8b10 	vmov	d0, r8, r9
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	f8cd a004 	str.w	sl, [sp, #4]
 8004f8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f7ff fd2e 	bl	80049f0 <__cvt>
 8004f94:	4680      	mov	r8, r0
 8004f96:	e648      	b.n	8004c2a <_printf_float+0x112>

08004f98 <_printf_common>:
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	688a      	ldr	r2, [r1, #8]
 8004fa2:	690b      	ldr	r3, [r1, #16]
 8004fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bfb8      	it	lt
 8004fac:	4613      	movlt	r3, r2
 8004fae:	f8c9 3000 	str.w	r3, [r9]
 8004fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	b112      	cbz	r2, 8004fc2 <_printf_common+0x2a>
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f8c9 3000 	str.w	r3, [r9]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	0699      	lsls	r1, r3, #26
 8004fc6:	bf42      	ittt	mi
 8004fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fcc:	3302      	addmi	r3, #2
 8004fce:	f8c9 3000 	strmi.w	r3, [r9]
 8004fd2:	6825      	ldr	r5, [r4, #0]
 8004fd4:	f015 0506 	ands.w	r5, r5, #6
 8004fd8:	d107      	bne.n	8004fea <_printf_common+0x52>
 8004fda:	f104 0a19 	add.w	sl, r4, #25
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	dc28      	bgt.n	800503c <_printf_common+0xa4>
 8004fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	3300      	adds	r3, #0
 8004ff2:	bf18      	it	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	0692      	lsls	r2, r2, #26
 8004ff8:	d42d      	bmi.n	8005056 <_printf_common+0xbe>
 8004ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ffe:	4639      	mov	r1, r7
 8005000:	4630      	mov	r0, r6
 8005002:	47c0      	blx	r8
 8005004:	3001      	adds	r0, #1
 8005006:	d020      	beq.n	800504a <_printf_common+0xb2>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	68e5      	ldr	r5, [r4, #12]
 800500c:	f8d9 2000 	ldr.w	r2, [r9]
 8005010:	f003 0306 	and.w	r3, r3, #6
 8005014:	2b04      	cmp	r3, #4
 8005016:	bf08      	it	eq
 8005018:	1aad      	subeq	r5, r5, r2
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	bf0c      	ite	eq
 8005020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005024:	2500      	movne	r5, #0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfc4      	itt	gt
 800502a:	1a9b      	subgt	r3, r3, r2
 800502c:	18ed      	addgt	r5, r5, r3
 800502e:	f04f 0900 	mov.w	r9, #0
 8005032:	341a      	adds	r4, #26
 8005034:	454d      	cmp	r5, r9
 8005036:	d11a      	bne.n	800506e <_printf_common+0xd6>
 8005038:	2000      	movs	r0, #0
 800503a:	e008      	b.n	800504e <_printf_common+0xb6>
 800503c:	2301      	movs	r3, #1
 800503e:	4652      	mov	r2, sl
 8005040:	4639      	mov	r1, r7
 8005042:	4630      	mov	r0, r6
 8005044:	47c0      	blx	r8
 8005046:	3001      	adds	r0, #1
 8005048:	d103      	bne.n	8005052 <_printf_common+0xba>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	3501      	adds	r5, #1
 8005054:	e7c3      	b.n	8004fde <_printf_common+0x46>
 8005056:	18e1      	adds	r1, r4, r3
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	2030      	movs	r0, #48	; 0x30
 800505c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005060:	4422      	add	r2, r4
 8005062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800506a:	3302      	adds	r3, #2
 800506c:	e7c5      	b.n	8004ffa <_printf_common+0x62>
 800506e:	2301      	movs	r3, #1
 8005070:	4622      	mov	r2, r4
 8005072:	4639      	mov	r1, r7
 8005074:	4630      	mov	r0, r6
 8005076:	47c0      	blx	r8
 8005078:	3001      	adds	r0, #1
 800507a:	d0e6      	beq.n	800504a <_printf_common+0xb2>
 800507c:	f109 0901 	add.w	r9, r9, #1
 8005080:	e7d8      	b.n	8005034 <_printf_common+0x9c>
	...

08005084 <_printf_i>:
 8005084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800508c:	460c      	mov	r4, r1
 800508e:	7e09      	ldrb	r1, [r1, #24]
 8005090:	b085      	sub	sp, #20
 8005092:	296e      	cmp	r1, #110	; 0x6e
 8005094:	4617      	mov	r7, r2
 8005096:	4606      	mov	r6, r0
 8005098:	4698      	mov	r8, r3
 800509a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800509c:	f000 80b3 	beq.w	8005206 <_printf_i+0x182>
 80050a0:	d822      	bhi.n	80050e8 <_printf_i+0x64>
 80050a2:	2963      	cmp	r1, #99	; 0x63
 80050a4:	d036      	beq.n	8005114 <_printf_i+0x90>
 80050a6:	d80a      	bhi.n	80050be <_printf_i+0x3a>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	f000 80b9 	beq.w	8005220 <_printf_i+0x19c>
 80050ae:	2958      	cmp	r1, #88	; 0x58
 80050b0:	f000 8083 	beq.w	80051ba <_printf_i+0x136>
 80050b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050bc:	e032      	b.n	8005124 <_printf_i+0xa0>
 80050be:	2964      	cmp	r1, #100	; 0x64
 80050c0:	d001      	beq.n	80050c6 <_printf_i+0x42>
 80050c2:	2969      	cmp	r1, #105	; 0x69
 80050c4:	d1f6      	bne.n	80050b4 <_printf_i+0x30>
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	0605      	lsls	r5, r0, #24
 80050cc:	f103 0104 	add.w	r1, r3, #4
 80050d0:	d52a      	bpl.n	8005128 <_printf_i+0xa4>
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da03      	bge.n	80050e2 <_printf_i+0x5e>
 80050da:	222d      	movs	r2, #45	; 0x2d
 80050dc:	425b      	negs	r3, r3
 80050de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050e2:	486f      	ldr	r0, [pc, #444]	; (80052a0 <_printf_i+0x21c>)
 80050e4:	220a      	movs	r2, #10
 80050e6:	e039      	b.n	800515c <_printf_i+0xd8>
 80050e8:	2973      	cmp	r1, #115	; 0x73
 80050ea:	f000 809d 	beq.w	8005228 <_printf_i+0x1a4>
 80050ee:	d808      	bhi.n	8005102 <_printf_i+0x7e>
 80050f0:	296f      	cmp	r1, #111	; 0x6f
 80050f2:	d020      	beq.n	8005136 <_printf_i+0xb2>
 80050f4:	2970      	cmp	r1, #112	; 0x70
 80050f6:	d1dd      	bne.n	80050b4 <_printf_i+0x30>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f043 0320 	orr.w	r3, r3, #32
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	e003      	b.n	800510a <_printf_i+0x86>
 8005102:	2975      	cmp	r1, #117	; 0x75
 8005104:	d017      	beq.n	8005136 <_printf_i+0xb2>
 8005106:	2978      	cmp	r1, #120	; 0x78
 8005108:	d1d4      	bne.n	80050b4 <_printf_i+0x30>
 800510a:	2378      	movs	r3, #120	; 0x78
 800510c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005110:	4864      	ldr	r0, [pc, #400]	; (80052a4 <_printf_i+0x220>)
 8005112:	e055      	b.n	80051c0 <_printf_i+0x13c>
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	1d19      	adds	r1, r3, #4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6011      	str	r1, [r2, #0]
 800511c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005124:	2301      	movs	r3, #1
 8005126:	e08c      	b.n	8005242 <_printf_i+0x1be>
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6011      	str	r1, [r2, #0]
 800512c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005130:	bf18      	it	ne
 8005132:	b21b      	sxthne	r3, r3
 8005134:	e7cf      	b.n	80050d6 <_printf_i+0x52>
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6010      	str	r0, [r2, #0]
 800513e:	0628      	lsls	r0, r5, #24
 8005140:	d501      	bpl.n	8005146 <_printf_i+0xc2>
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	e002      	b.n	800514c <_printf_i+0xc8>
 8005146:	0668      	lsls	r0, r5, #25
 8005148:	d5fb      	bpl.n	8005142 <_printf_i+0xbe>
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_printf_i+0x21c>)
 800514e:	296f      	cmp	r1, #111	; 0x6f
 8005150:	bf14      	ite	ne
 8005152:	220a      	movne	r2, #10
 8005154:	2208      	moveq	r2, #8
 8005156:	2100      	movs	r1, #0
 8005158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515c:	6865      	ldr	r5, [r4, #4]
 800515e:	60a5      	str	r5, [r4, #8]
 8005160:	2d00      	cmp	r5, #0
 8005162:	f2c0 8095 	blt.w	8005290 <_printf_i+0x20c>
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	f021 0104 	bic.w	r1, r1, #4
 800516c:	6021      	str	r1, [r4, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d13d      	bne.n	80051ee <_printf_i+0x16a>
 8005172:	2d00      	cmp	r5, #0
 8005174:	f040 808e 	bne.w	8005294 <_printf_i+0x210>
 8005178:	4665      	mov	r5, ip
 800517a:	2a08      	cmp	r2, #8
 800517c:	d10b      	bne.n	8005196 <_printf_i+0x112>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	07db      	lsls	r3, r3, #31
 8005182:	d508      	bpl.n	8005196 <_printf_i+0x112>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	6862      	ldr	r2, [r4, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	bfde      	ittt	le
 800518c:	2330      	movle	r3, #48	; 0x30
 800518e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005196:	ebac 0305 	sub.w	r3, ip, r5
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	f8cd 8000 	str.w	r8, [sp]
 80051a0:	463b      	mov	r3, r7
 80051a2:	aa03      	add	r2, sp, #12
 80051a4:	4621      	mov	r1, r4
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7ff fef6 	bl	8004f98 <_printf_common>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d14d      	bne.n	800524c <_printf_i+0x1c8>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	b005      	add	sp, #20
 80051b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ba:	4839      	ldr	r0, [pc, #228]	; (80052a0 <_printf_i+0x21c>)
 80051bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051c0:	6813      	ldr	r3, [r2, #0]
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	1d1d      	adds	r5, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6015      	str	r5, [r2, #0]
 80051ca:	060a      	lsls	r2, r1, #24
 80051cc:	d50b      	bpl.n	80051e6 <_printf_i+0x162>
 80051ce:	07ca      	lsls	r2, r1, #31
 80051d0:	bf44      	itt	mi
 80051d2:	f041 0120 	orrmi.w	r1, r1, #32
 80051d6:	6021      	strmi	r1, [r4, #0]
 80051d8:	b91b      	cbnz	r3, 80051e2 <_printf_i+0x15e>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	f022 0220 	bic.w	r2, r2, #32
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	e7b7      	b.n	8005156 <_printf_i+0xd2>
 80051e6:	064d      	lsls	r5, r1, #25
 80051e8:	bf48      	it	mi
 80051ea:	b29b      	uxthmi	r3, r3
 80051ec:	e7ef      	b.n	80051ce <_printf_i+0x14a>
 80051ee:	4665      	mov	r5, ip
 80051f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051f4:	fb02 3311 	mls	r3, r2, r1, r3
 80051f8:	5cc3      	ldrb	r3, [r0, r3]
 80051fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051fe:	460b      	mov	r3, r1
 8005200:	2900      	cmp	r1, #0
 8005202:	d1f5      	bne.n	80051f0 <_printf_i+0x16c>
 8005204:	e7b9      	b.n	800517a <_printf_i+0xf6>
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	6961      	ldr	r1, [r4, #20]
 800520c:	1d18      	adds	r0, r3, #4
 800520e:	6010      	str	r0, [r2, #0]
 8005210:	0628      	lsls	r0, r5, #24
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	d501      	bpl.n	800521a <_printf_i+0x196>
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	e002      	b.n	8005220 <_printf_i+0x19c>
 800521a:	066a      	lsls	r2, r5, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0x192>
 800521e:	8019      	strh	r1, [r3, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	4665      	mov	r5, ip
 8005226:	e7b9      	b.n	800519c <_printf_i+0x118>
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	1d19      	adds	r1, r3, #4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	681d      	ldr	r5, [r3, #0]
 8005230:	6862      	ldr	r2, [r4, #4]
 8005232:	2100      	movs	r1, #0
 8005234:	4628      	mov	r0, r5
 8005236:	f7fa ffeb 	bl	8000210 <memchr>
 800523a:	b108      	cbz	r0, 8005240 <_printf_i+0x1bc>
 800523c:	1b40      	subs	r0, r0, r5
 800523e:	6060      	str	r0, [r4, #4]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2300      	movs	r3, #0
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524a:	e7a7      	b.n	800519c <_printf_i+0x118>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	462a      	mov	r2, r5
 8005250:	4639      	mov	r1, r7
 8005252:	4630      	mov	r0, r6
 8005254:	47c0      	blx	r8
 8005256:	3001      	adds	r0, #1
 8005258:	d0aa      	beq.n	80051b0 <_printf_i+0x12c>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	079b      	lsls	r3, r3, #30
 800525e:	d413      	bmi.n	8005288 <_printf_i+0x204>
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	4298      	cmp	r0, r3
 8005266:	bfb8      	it	lt
 8005268:	4618      	movlt	r0, r3
 800526a:	e7a3      	b.n	80051b4 <_printf_i+0x130>
 800526c:	2301      	movs	r3, #1
 800526e:	464a      	mov	r2, r9
 8005270:	4639      	mov	r1, r7
 8005272:	4630      	mov	r0, r6
 8005274:	47c0      	blx	r8
 8005276:	3001      	adds	r0, #1
 8005278:	d09a      	beq.n	80051b0 <_printf_i+0x12c>
 800527a:	3501      	adds	r5, #1
 800527c:	68e3      	ldr	r3, [r4, #12]
 800527e:	9a03      	ldr	r2, [sp, #12]
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	42ab      	cmp	r3, r5
 8005284:	dcf2      	bgt.n	800526c <_printf_i+0x1e8>
 8005286:	e7eb      	b.n	8005260 <_printf_i+0x1dc>
 8005288:	2500      	movs	r5, #0
 800528a:	f104 0919 	add.w	r9, r4, #25
 800528e:	e7f5      	b.n	800527c <_printf_i+0x1f8>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ac      	bne.n	80051ee <_printf_i+0x16a>
 8005294:	7803      	ldrb	r3, [r0, #0]
 8005296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800529e:	e76c      	b.n	800517a <_printf_i+0xf6>
 80052a0:	080070fa 	.word	0x080070fa
 80052a4:	0800710b 	.word	0x0800710b

080052a8 <siprintf>:
 80052a8:	b40e      	push	{r1, r2, r3}
 80052aa:	b500      	push	{lr}
 80052ac:	b09c      	sub	sp, #112	; 0x70
 80052ae:	ab1d      	add	r3, sp, #116	; 0x74
 80052b0:	9002      	str	r0, [sp, #8]
 80052b2:	9006      	str	r0, [sp, #24]
 80052b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <siprintf+0x38>)
 80052ba:	9107      	str	r1, [sp, #28]
 80052bc:	9104      	str	r1, [sp, #16]
 80052be:	4909      	ldr	r1, [pc, #36]	; (80052e4 <siprintf+0x3c>)
 80052c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c4:	9105      	str	r1, [sp, #20]
 80052c6:	6800      	ldr	r0, [r0, #0]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	a902      	add	r1, sp, #8
 80052cc:	f001 fa6c 	bl	80067a8 <_svfiprintf_r>
 80052d0:	9b02      	ldr	r3, [sp, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	b01c      	add	sp, #112	; 0x70
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b003      	add	sp, #12
 80052de:	4770      	bx	lr
 80052e0:	2000001c 	.word	0x2000001c
 80052e4:	ffff0208 	.word	0xffff0208

080052e8 <strcat>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4603      	mov	r3, r0
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	1c5c      	adds	r4, r3, #1
 80052f0:	b93a      	cbnz	r2, 8005302 <strcat+0x1a>
 80052f2:	3b01      	subs	r3, #1
 80052f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d1f9      	bne.n	80052f4 <strcat+0xc>
 8005300:	bd10      	pop	{r4, pc}
 8005302:	4623      	mov	r3, r4
 8005304:	e7f2      	b.n	80052ec <strcat+0x4>

08005306 <quorem>:
 8005306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530a:	6903      	ldr	r3, [r0, #16]
 800530c:	690c      	ldr	r4, [r1, #16]
 800530e:	42a3      	cmp	r3, r4
 8005310:	4680      	mov	r8, r0
 8005312:	f2c0 8082 	blt.w	800541a <quorem+0x114>
 8005316:	3c01      	subs	r4, #1
 8005318:	f101 0714 	add.w	r7, r1, #20
 800531c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005320:	f100 0614 	add.w	r6, r0, #20
 8005324:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005328:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800532c:	eb06 030c 	add.w	r3, r6, ip
 8005330:	3501      	adds	r5, #1
 8005332:	eb07 090c 	add.w	r9, r7, ip
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	fbb0 f5f5 	udiv	r5, r0, r5
 800533c:	b395      	cbz	r5, 80053a4 <quorem+0x9e>
 800533e:	f04f 0a00 	mov.w	sl, #0
 8005342:	4638      	mov	r0, r7
 8005344:	46b6      	mov	lr, r6
 8005346:	46d3      	mov	fp, sl
 8005348:	f850 2b04 	ldr.w	r2, [r0], #4
 800534c:	b293      	uxth	r3, r2
 800534e:	fb05 a303 	mla	r3, r5, r3, sl
 8005352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005356:	b29b      	uxth	r3, r3
 8005358:	ebab 0303 	sub.w	r3, fp, r3
 800535c:	0c12      	lsrs	r2, r2, #16
 800535e:	f8de b000 	ldr.w	fp, [lr]
 8005362:	fb05 a202 	mla	r2, r5, r2, sl
 8005366:	fa13 f38b 	uxtah	r3, r3, fp
 800536a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800536e:	fa1f fb82 	uxth.w	fp, r2
 8005372:	f8de 2000 	ldr.w	r2, [lr]
 8005376:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800537a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005384:	4581      	cmp	r9, r0
 8005386:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800538a:	f84e 3b04 	str.w	r3, [lr], #4
 800538e:	d2db      	bcs.n	8005348 <quorem+0x42>
 8005390:	f856 300c 	ldr.w	r3, [r6, ip]
 8005394:	b933      	cbnz	r3, 80053a4 <quorem+0x9e>
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	3b04      	subs	r3, #4
 800539a:	429e      	cmp	r6, r3
 800539c:	461a      	mov	r2, r3
 800539e:	d330      	bcc.n	8005402 <quorem+0xfc>
 80053a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80053a4:	4640      	mov	r0, r8
 80053a6:	f001 f829 	bl	80063fc <__mcmp>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	db25      	blt.n	80053fa <quorem+0xf4>
 80053ae:	3501      	adds	r5, #1
 80053b0:	4630      	mov	r0, r6
 80053b2:	f04f 0c00 	mov.w	ip, #0
 80053b6:	f857 2b04 	ldr.w	r2, [r7], #4
 80053ba:	f8d0 e000 	ldr.w	lr, [r0]
 80053be:	b293      	uxth	r3, r2
 80053c0:	ebac 0303 	sub.w	r3, ip, r3
 80053c4:	0c12      	lsrs	r2, r2, #16
 80053c6:	fa13 f38e 	uxtah	r3, r3, lr
 80053ca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053d8:	45b9      	cmp	r9, r7
 80053da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053de:	f840 3b04 	str.w	r3, [r0], #4
 80053e2:	d2e8      	bcs.n	80053b6 <quorem+0xb0>
 80053e4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053e8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053ec:	b92a      	cbnz	r2, 80053fa <quorem+0xf4>
 80053ee:	3b04      	subs	r3, #4
 80053f0:	429e      	cmp	r6, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	d30b      	bcc.n	800540e <quorem+0x108>
 80053f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80053fa:	4628      	mov	r0, r5
 80053fc:	b003      	add	sp, #12
 80053fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	3b04      	subs	r3, #4
 8005406:	2a00      	cmp	r2, #0
 8005408:	d1ca      	bne.n	80053a0 <quorem+0x9a>
 800540a:	3c01      	subs	r4, #1
 800540c:	e7c5      	b.n	800539a <quorem+0x94>
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	3b04      	subs	r3, #4
 8005412:	2a00      	cmp	r2, #0
 8005414:	d1ef      	bne.n	80053f6 <quorem+0xf0>
 8005416:	3c01      	subs	r4, #1
 8005418:	e7ea      	b.n	80053f0 <quorem+0xea>
 800541a:	2000      	movs	r0, #0
 800541c:	e7ee      	b.n	80053fc <quorem+0xf6>
	...

08005420 <_dtoa_r>:
 8005420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005424:	ec57 6b10 	vmov	r6, r7, d0
 8005428:	b097      	sub	sp, #92	; 0x5c
 800542a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800542c:	9106      	str	r1, [sp, #24]
 800542e:	4604      	mov	r4, r0
 8005430:	920b      	str	r2, [sp, #44]	; 0x2c
 8005432:	9312      	str	r3, [sp, #72]	; 0x48
 8005434:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005438:	e9cd 6700 	strd	r6, r7, [sp]
 800543c:	b93d      	cbnz	r5, 800544e <_dtoa_r+0x2e>
 800543e:	2010      	movs	r0, #16
 8005440:	f000 fdb4 	bl	8005fac <malloc>
 8005444:	6260      	str	r0, [r4, #36]	; 0x24
 8005446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800544a:	6005      	str	r5, [r0, #0]
 800544c:	60c5      	str	r5, [r0, #12]
 800544e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	b151      	cbz	r1, 800546a <_dtoa_r+0x4a>
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	604a      	str	r2, [r1, #4]
 8005458:	2301      	movs	r3, #1
 800545a:	4093      	lsls	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fdeb 	bl	800603a <_Bfree>
 8005464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	1e3b      	subs	r3, r7, #0
 800546c:	bfbb      	ittet	lt
 800546e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005472:	9301      	strlt	r3, [sp, #4]
 8005474:	2300      	movge	r3, #0
 8005476:	2201      	movlt	r2, #1
 8005478:	bfac      	ite	ge
 800547a:	f8c8 3000 	strge.w	r3, [r8]
 800547e:	f8c8 2000 	strlt.w	r2, [r8]
 8005482:	4baf      	ldr	r3, [pc, #700]	; (8005740 <_dtoa_r+0x320>)
 8005484:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005488:	ea33 0308 	bics.w	r3, r3, r8
 800548c:	d114      	bne.n	80054b8 <_dtoa_r+0x98>
 800548e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005490:	f242 730f 	movw	r3, #9999	; 0x270f
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	9b00      	ldr	r3, [sp, #0]
 8005498:	b923      	cbnz	r3, 80054a4 <_dtoa_r+0x84>
 800549a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800549e:	2800      	cmp	r0, #0
 80054a0:	f000 8542 	beq.w	8005f28 <_dtoa_r+0xb08>
 80054a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005754 <_dtoa_r+0x334>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8544 	beq.w	8005f38 <_dtoa_r+0xb18>
 80054b0:	f10b 0303 	add.w	r3, fp, #3
 80054b4:	f000 bd3e 	b.w	8005f34 <_dtoa_r+0xb14>
 80054b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054bc:	2200      	movs	r2, #0
 80054be:	2300      	movs	r3, #0
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fb fb18 	bl	8000af8 <__aeabi_dcmpeq>
 80054c8:	4681      	mov	r9, r0
 80054ca:	b168      	cbz	r0, 80054e8 <_dtoa_r+0xc8>
 80054cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ce:	2301      	movs	r3, #1
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8524 	beq.w	8005f22 <_dtoa_r+0xb02>
 80054da:	4b9a      	ldr	r3, [pc, #616]	; (8005744 <_dtoa_r+0x324>)
 80054dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054de:	f103 3bff 	add.w	fp, r3, #4294967295
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	f000 bd28 	b.w	8005f38 <_dtoa_r+0xb18>
 80054e8:	aa14      	add	r2, sp, #80	; 0x50
 80054ea:	a915      	add	r1, sp, #84	; 0x54
 80054ec:	ec47 6b10 	vmov	d0, r6, r7
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fffa 	bl	80064ea <__d2b>
 80054f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054fa:	9004      	str	r0, [sp, #16]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d07c      	beq.n	80055fa <_dtoa_r+0x1da>
 8005500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005504:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005508:	46b2      	mov	sl, r6
 800550a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800550e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005512:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005516:	2200      	movs	r2, #0
 8005518:	4b8b      	ldr	r3, [pc, #556]	; (8005748 <_dtoa_r+0x328>)
 800551a:	4650      	mov	r0, sl
 800551c:	4659      	mov	r1, fp
 800551e:	f7fa fecb 	bl	80002b8 <__aeabi_dsub>
 8005522:	a381      	add	r3, pc, #516	; (adr r3, 8005728 <_dtoa_r+0x308>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fb f87e 	bl	8000628 <__aeabi_dmul>
 800552c:	a380      	add	r3, pc, #512	; (adr r3, 8005730 <_dtoa_r+0x310>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa fec3 	bl	80002bc <__adddf3>
 8005536:	4606      	mov	r6, r0
 8005538:	4628      	mov	r0, r5
 800553a:	460f      	mov	r7, r1
 800553c:	f7fb f80a 	bl	8000554 <__aeabi_i2d>
 8005540:	a37d      	add	r3, pc, #500	; (adr r3, 8005738 <_dtoa_r+0x318>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fb f86f 	bl	8000628 <__aeabi_dmul>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fa feb3 	bl	80002bc <__adddf3>
 8005556:	4606      	mov	r6, r0
 8005558:	460f      	mov	r7, r1
 800555a:	f7fb fb15 	bl	8000b88 <__aeabi_d2iz>
 800555e:	2200      	movs	r2, #0
 8005560:	4682      	mov	sl, r0
 8005562:	2300      	movs	r3, #0
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb fad0 	bl	8000b0c <__aeabi_dcmplt>
 800556c:	b148      	cbz	r0, 8005582 <_dtoa_r+0x162>
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa fff0 	bl	8000554 <__aeabi_i2d>
 8005574:	4632      	mov	r2, r6
 8005576:	463b      	mov	r3, r7
 8005578:	f7fb fabe 	bl	8000af8 <__aeabi_dcmpeq>
 800557c:	b908      	cbnz	r0, 8005582 <_dtoa_r+0x162>
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005582:	f1ba 0f16 	cmp.w	sl, #22
 8005586:	d859      	bhi.n	800563c <_dtoa_r+0x21c>
 8005588:	4970      	ldr	r1, [pc, #448]	; (800574c <_dtoa_r+0x32c>)
 800558a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800558e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005596:	f7fb fad7 	bl	8000b48 <__aeabi_dcmpgt>
 800559a:	2800      	cmp	r0, #0
 800559c:	d050      	beq.n	8005640 <_dtoa_r+0x220>
 800559e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055a2:	2300      	movs	r3, #0
 80055a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055a8:	1b5d      	subs	r5, r3, r5
 80055aa:	f1b5 0801 	subs.w	r8, r5, #1
 80055ae:	bf49      	itett	mi
 80055b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80055b4:	2300      	movpl	r3, #0
 80055b6:	9305      	strmi	r3, [sp, #20]
 80055b8:	f04f 0800 	movmi.w	r8, #0
 80055bc:	bf58      	it	pl
 80055be:	9305      	strpl	r3, [sp, #20]
 80055c0:	f1ba 0f00 	cmp.w	sl, #0
 80055c4:	db3e      	blt.n	8005644 <_dtoa_r+0x224>
 80055c6:	2300      	movs	r3, #0
 80055c8:	44d0      	add	r8, sl
 80055ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	9b06      	ldr	r3, [sp, #24]
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	f200 8090 	bhi.w	80056f8 <_dtoa_r+0x2d8>
 80055d8:	2b05      	cmp	r3, #5
 80055da:	bfc4      	itt	gt
 80055dc:	3b04      	subgt	r3, #4
 80055de:	9306      	strgt	r3, [sp, #24]
 80055e0:	9b06      	ldr	r3, [sp, #24]
 80055e2:	f1a3 0302 	sub.w	r3, r3, #2
 80055e6:	bfcc      	ite	gt
 80055e8:	2500      	movgt	r5, #0
 80055ea:	2501      	movle	r5, #1
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	f200 808f 	bhi.w	8005710 <_dtoa_r+0x2f0>
 80055f2:	e8df f003 	tbb	[pc, r3]
 80055f6:	7f7d      	.short	0x7f7d
 80055f8:	7131      	.short	0x7131
 80055fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80055fe:	441d      	add	r5, r3
 8005600:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005604:	2820      	cmp	r0, #32
 8005606:	dd13      	ble.n	8005630 <_dtoa_r+0x210>
 8005608:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800560c:	9b00      	ldr	r3, [sp, #0]
 800560e:	fa08 f800 	lsl.w	r8, r8, r0
 8005612:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005616:	fa23 f000 	lsr.w	r0, r3, r0
 800561a:	ea48 0000 	orr.w	r0, r8, r0
 800561e:	f7fa ff89 	bl	8000534 <__aeabi_ui2d>
 8005622:	2301      	movs	r3, #1
 8005624:	4682      	mov	sl, r0
 8005626:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800562a:	3d01      	subs	r5, #1
 800562c:	9313      	str	r3, [sp, #76]	; 0x4c
 800562e:	e772      	b.n	8005516 <_dtoa_r+0xf6>
 8005630:	9b00      	ldr	r3, [sp, #0]
 8005632:	f1c0 0020 	rsb	r0, r0, #32
 8005636:	fa03 f000 	lsl.w	r0, r3, r0
 800563a:	e7f0      	b.n	800561e <_dtoa_r+0x1fe>
 800563c:	2301      	movs	r3, #1
 800563e:	e7b1      	b.n	80055a4 <_dtoa_r+0x184>
 8005640:	900f      	str	r0, [sp, #60]	; 0x3c
 8005642:	e7b0      	b.n	80055a6 <_dtoa_r+0x186>
 8005644:	9b05      	ldr	r3, [sp, #20]
 8005646:	eba3 030a 	sub.w	r3, r3, sl
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	f1ca 0300 	rsb	r3, sl, #0
 8005650:	9307      	str	r3, [sp, #28]
 8005652:	2300      	movs	r3, #0
 8005654:	930e      	str	r3, [sp, #56]	; 0x38
 8005656:	e7bb      	b.n	80055d0 <_dtoa_r+0x1b0>
 8005658:	2301      	movs	r3, #1
 800565a:	930a      	str	r3, [sp, #40]	; 0x28
 800565c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd59      	ble.n	8005716 <_dtoa_r+0x2f6>
 8005662:	9302      	str	r3, [sp, #8]
 8005664:	4699      	mov	r9, r3
 8005666:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005668:	2200      	movs	r2, #0
 800566a:	6072      	str	r2, [r6, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	f102 0014 	add.w	r0, r2, #20
 8005672:	4298      	cmp	r0, r3
 8005674:	6871      	ldr	r1, [r6, #4]
 8005676:	d953      	bls.n	8005720 <_dtoa_r+0x300>
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fcaa 	bl	8005fd2 <_Balloc>
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	6030      	str	r0, [r6, #0]
 8005682:	f1b9 0f0e 	cmp.w	r9, #14
 8005686:	f8d3 b000 	ldr.w	fp, [r3]
 800568a:	f200 80e6 	bhi.w	800585a <_dtoa_r+0x43a>
 800568e:	2d00      	cmp	r5, #0
 8005690:	f000 80e3 	beq.w	800585a <_dtoa_r+0x43a>
 8005694:	ed9d 7b00 	vldr	d7, [sp]
 8005698:	f1ba 0f00 	cmp.w	sl, #0
 800569c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80056a0:	dd74      	ble.n	800578c <_dtoa_r+0x36c>
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <_dtoa_r+0x32c>)
 80056a4:	f00a 030f 	and.w	r3, sl, #15
 80056a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056ac:	ed93 7b00 	vldr	d7, [r3]
 80056b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80056b4:	06f0      	lsls	r0, r6, #27
 80056b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80056ba:	d565      	bpl.n	8005788 <_dtoa_r+0x368>
 80056bc:	4b24      	ldr	r3, [pc, #144]	; (8005750 <_dtoa_r+0x330>)
 80056be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c6:	f7fb f8d9 	bl	800087c <__aeabi_ddiv>
 80056ca:	e9cd 0100 	strd	r0, r1, [sp]
 80056ce:	f006 060f 	and.w	r6, r6, #15
 80056d2:	2503      	movs	r5, #3
 80056d4:	4f1e      	ldr	r7, [pc, #120]	; (8005750 <_dtoa_r+0x330>)
 80056d6:	e04c      	b.n	8005772 <_dtoa_r+0x352>
 80056d8:	2301      	movs	r3, #1
 80056da:	930a      	str	r3, [sp, #40]	; 0x28
 80056dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056de:	4453      	add	r3, sl
 80056e0:	f103 0901 	add.w	r9, r3, #1
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	464b      	mov	r3, r9
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	bfb8      	it	lt
 80056ec:	2301      	movlt	r3, #1
 80056ee:	e7ba      	b.n	8005666 <_dtoa_r+0x246>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e7b2      	b.n	800565a <_dtoa_r+0x23a>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e7f0      	b.n	80056da <_dtoa_r+0x2ba>
 80056f8:	2501      	movs	r5, #1
 80056fa:	2300      	movs	r3, #0
 80056fc:	9306      	str	r3, [sp, #24]
 80056fe:	950a      	str	r5, [sp, #40]	; 0x28
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	4699      	mov	r9, r3
 8005708:	2200      	movs	r2, #0
 800570a:	2312      	movs	r3, #18
 800570c:	920b      	str	r2, [sp, #44]	; 0x2c
 800570e:	e7aa      	b.n	8005666 <_dtoa_r+0x246>
 8005710:	2301      	movs	r3, #1
 8005712:	930a      	str	r3, [sp, #40]	; 0x28
 8005714:	e7f4      	b.n	8005700 <_dtoa_r+0x2e0>
 8005716:	2301      	movs	r3, #1
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	4699      	mov	r9, r3
 800571c:	461a      	mov	r2, r3
 800571e:	e7f5      	b.n	800570c <_dtoa_r+0x2ec>
 8005720:	3101      	adds	r1, #1
 8005722:	6071      	str	r1, [r6, #4]
 8005724:	0052      	lsls	r2, r2, #1
 8005726:	e7a2      	b.n	800566e <_dtoa_r+0x24e>
 8005728:	636f4361 	.word	0x636f4361
 800572c:	3fd287a7 	.word	0x3fd287a7
 8005730:	8b60c8b3 	.word	0x8b60c8b3
 8005734:	3fc68a28 	.word	0x3fc68a28
 8005738:	509f79fb 	.word	0x509f79fb
 800573c:	3fd34413 	.word	0x3fd34413
 8005740:	7ff00000 	.word	0x7ff00000
 8005744:	080070f9 	.word	0x080070f9
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	08007158 	.word	0x08007158
 8005750:	08007130 	.word	0x08007130
 8005754:	08007125 	.word	0x08007125
 8005758:	07f1      	lsls	r1, r6, #31
 800575a:	d508      	bpl.n	800576e <_dtoa_r+0x34e>
 800575c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	f7fa ff60 	bl	8000628 <__aeabi_dmul>
 8005768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800576c:	3501      	adds	r5, #1
 800576e:	1076      	asrs	r6, r6, #1
 8005770:	3708      	adds	r7, #8
 8005772:	2e00      	cmp	r6, #0
 8005774:	d1f0      	bne.n	8005758 <_dtoa_r+0x338>
 8005776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800577a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577e:	f7fb f87d 	bl	800087c <__aeabi_ddiv>
 8005782:	e9cd 0100 	strd	r0, r1, [sp]
 8005786:	e01a      	b.n	80057be <_dtoa_r+0x39e>
 8005788:	2502      	movs	r5, #2
 800578a:	e7a3      	b.n	80056d4 <_dtoa_r+0x2b4>
 800578c:	f000 80a0 	beq.w	80058d0 <_dtoa_r+0x4b0>
 8005790:	f1ca 0600 	rsb	r6, sl, #0
 8005794:	4b9f      	ldr	r3, [pc, #636]	; (8005a14 <_dtoa_r+0x5f4>)
 8005796:	4fa0      	ldr	r7, [pc, #640]	; (8005a18 <_dtoa_r+0x5f8>)
 8005798:	f006 020f 	and.w	r2, r6, #15
 800579c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057a8:	f7fa ff3e 	bl	8000628 <__aeabi_dmul>
 80057ac:	e9cd 0100 	strd	r0, r1, [sp]
 80057b0:	1136      	asrs	r6, r6, #4
 80057b2:	2300      	movs	r3, #0
 80057b4:	2502      	movs	r5, #2
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	d17f      	bne.n	80058ba <_dtoa_r+0x49a>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e1      	bne.n	8005782 <_dtoa_r+0x362>
 80057be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8087 	beq.w	80058d4 <_dtoa_r+0x4b4>
 80057c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057ca:	2200      	movs	r2, #0
 80057cc:	4b93      	ldr	r3, [pc, #588]	; (8005a1c <_dtoa_r+0x5fc>)
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f99b 	bl	8000b0c <__aeabi_dcmplt>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d07c      	beq.n	80058d4 <_dtoa_r+0x4b4>
 80057da:	f1b9 0f00 	cmp.w	r9, #0
 80057de:	d079      	beq.n	80058d4 <_dtoa_r+0x4b4>
 80057e0:	9b02      	ldr	r3, [sp, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dd35      	ble.n	8005852 <_dtoa_r+0x432>
 80057e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ea:	9308      	str	r3, [sp, #32]
 80057ec:	4639      	mov	r1, r7
 80057ee:	2200      	movs	r2, #0
 80057f0:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <_dtoa_r+0x600>)
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7fa ff18 	bl	8000628 <__aeabi_dmul>
 80057f8:	e9cd 0100 	strd	r0, r1, [sp]
 80057fc:	9f02      	ldr	r7, [sp, #8]
 80057fe:	3501      	adds	r5, #1
 8005800:	4628      	mov	r0, r5
 8005802:	f7fa fea7 	bl	8000554 <__aeabi_i2d>
 8005806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800580a:	f7fa ff0d 	bl	8000628 <__aeabi_dmul>
 800580e:	2200      	movs	r2, #0
 8005810:	4b84      	ldr	r3, [pc, #528]	; (8005a24 <_dtoa_r+0x604>)
 8005812:	f7fa fd53 	bl	80002bc <__adddf3>
 8005816:	4605      	mov	r5, r0
 8005818:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800581c:	2f00      	cmp	r7, #0
 800581e:	d15d      	bne.n	80058dc <_dtoa_r+0x4bc>
 8005820:	2200      	movs	r2, #0
 8005822:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <_dtoa_r+0x608>)
 8005824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005828:	f7fa fd46 	bl	80002b8 <__aeabi_dsub>
 800582c:	462a      	mov	r2, r5
 800582e:	4633      	mov	r3, r6
 8005830:	e9cd 0100 	strd	r0, r1, [sp]
 8005834:	f7fb f988 	bl	8000b48 <__aeabi_dcmpgt>
 8005838:	2800      	cmp	r0, #0
 800583a:	f040 8288 	bne.w	8005d4e <_dtoa_r+0x92e>
 800583e:	462a      	mov	r2, r5
 8005840:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005848:	f7fb f960 	bl	8000b0c <__aeabi_dcmplt>
 800584c:	2800      	cmp	r0, #0
 800584e:	f040 827c 	bne.w	8005d4a <_dtoa_r+0x92a>
 8005852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005856:	e9cd 2300 	strd	r2, r3, [sp]
 800585a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	f2c0 8150 	blt.w	8005b02 <_dtoa_r+0x6e2>
 8005862:	f1ba 0f0e 	cmp.w	sl, #14
 8005866:	f300 814c 	bgt.w	8005b02 <_dtoa_r+0x6e2>
 800586a:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <_dtoa_r+0x5f4>)
 800586c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005870:	ed93 7b00 	vldr	d7, [r3]
 8005874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005876:	2b00      	cmp	r3, #0
 8005878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800587c:	f280 80d8 	bge.w	8005a30 <_dtoa_r+0x610>
 8005880:	f1b9 0f00 	cmp.w	r9, #0
 8005884:	f300 80d4 	bgt.w	8005a30 <_dtoa_r+0x610>
 8005888:	f040 825e 	bne.w	8005d48 <_dtoa_r+0x928>
 800588c:	2200      	movs	r2, #0
 800588e:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <_dtoa_r+0x608>)
 8005890:	ec51 0b17 	vmov	r0, r1, d7
 8005894:	f7fa fec8 	bl	8000628 <__aeabi_dmul>
 8005898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589c:	f7fb f94a 	bl	8000b34 <__aeabi_dcmpge>
 80058a0:	464f      	mov	r7, r9
 80058a2:	464e      	mov	r6, r9
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f040 8234 	bne.w	8005d12 <_dtoa_r+0x8f2>
 80058aa:	2331      	movs	r3, #49	; 0x31
 80058ac:	f10b 0501 	add.w	r5, fp, #1
 80058b0:	f88b 3000 	strb.w	r3, [fp]
 80058b4:	f10a 0a01 	add.w	sl, sl, #1
 80058b8:	e22f      	b.n	8005d1a <_dtoa_r+0x8fa>
 80058ba:	07f2      	lsls	r2, r6, #31
 80058bc:	d505      	bpl.n	80058ca <_dtoa_r+0x4aa>
 80058be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c2:	f7fa feb1 	bl	8000628 <__aeabi_dmul>
 80058c6:	3501      	adds	r5, #1
 80058c8:	2301      	movs	r3, #1
 80058ca:	1076      	asrs	r6, r6, #1
 80058cc:	3708      	adds	r7, #8
 80058ce:	e772      	b.n	80057b6 <_dtoa_r+0x396>
 80058d0:	2502      	movs	r5, #2
 80058d2:	e774      	b.n	80057be <_dtoa_r+0x39e>
 80058d4:	f8cd a020 	str.w	sl, [sp, #32]
 80058d8:	464f      	mov	r7, r9
 80058da:	e791      	b.n	8005800 <_dtoa_r+0x3e0>
 80058dc:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <_dtoa_r+0x5f4>)
 80058de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d047      	beq.n	800597c <_dtoa_r+0x55c>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	2000      	movs	r0, #0
 80058f2:	494e      	ldr	r1, [pc, #312]	; (8005a2c <_dtoa_r+0x60c>)
 80058f4:	f7fa ffc2 	bl	800087c <__aeabi_ddiv>
 80058f8:	462a      	mov	r2, r5
 80058fa:	4633      	mov	r3, r6
 80058fc:	f7fa fcdc 	bl	80002b8 <__aeabi_dsub>
 8005900:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005904:	465d      	mov	r5, fp
 8005906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800590a:	f7fb f93d 	bl	8000b88 <__aeabi_d2iz>
 800590e:	4606      	mov	r6, r0
 8005910:	f7fa fe20 	bl	8000554 <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800591c:	f7fa fccc 	bl	80002b8 <__aeabi_dsub>
 8005920:	3630      	adds	r6, #48	; 0x30
 8005922:	f805 6b01 	strb.w	r6, [r5], #1
 8005926:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800592a:	e9cd 0100 	strd	r0, r1, [sp]
 800592e:	f7fb f8ed 	bl	8000b0c <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	d163      	bne.n	80059fe <_dtoa_r+0x5de>
 8005936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593a:	2000      	movs	r0, #0
 800593c:	4937      	ldr	r1, [pc, #220]	; (8005a1c <_dtoa_r+0x5fc>)
 800593e:	f7fa fcbb 	bl	80002b8 <__aeabi_dsub>
 8005942:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005946:	f7fb f8e1 	bl	8000b0c <__aeabi_dcmplt>
 800594a:	2800      	cmp	r0, #0
 800594c:	f040 80b7 	bne.w	8005abe <_dtoa_r+0x69e>
 8005950:	eba5 030b 	sub.w	r3, r5, fp
 8005954:	429f      	cmp	r7, r3
 8005956:	f77f af7c 	ble.w	8005852 <_dtoa_r+0x432>
 800595a:	2200      	movs	r2, #0
 800595c:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <_dtoa_r+0x600>)
 800595e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005962:	f7fa fe61 	bl	8000628 <__aeabi_dmul>
 8005966:	2200      	movs	r2, #0
 8005968:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800596c:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <_dtoa_r+0x600>)
 800596e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005972:	f7fa fe59 	bl	8000628 <__aeabi_dmul>
 8005976:	e9cd 0100 	strd	r0, r1, [sp]
 800597a:	e7c4      	b.n	8005906 <_dtoa_r+0x4e6>
 800597c:	462a      	mov	r2, r5
 800597e:	4633      	mov	r3, r6
 8005980:	f7fa fe52 	bl	8000628 <__aeabi_dmul>
 8005984:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005988:	eb0b 0507 	add.w	r5, fp, r7
 800598c:	465e      	mov	r6, fp
 800598e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005992:	f7fb f8f9 	bl	8000b88 <__aeabi_d2iz>
 8005996:	4607      	mov	r7, r0
 8005998:	f7fa fddc 	bl	8000554 <__aeabi_i2d>
 800599c:	3730      	adds	r7, #48	; 0x30
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059a6:	f7fa fc87 	bl	80002b8 <__aeabi_dsub>
 80059aa:	f806 7b01 	strb.w	r7, [r6], #1
 80059ae:	42ae      	cmp	r6, r5
 80059b0:	e9cd 0100 	strd	r0, r1, [sp]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	d126      	bne.n	8005a08 <_dtoa_r+0x5e8>
 80059ba:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <_dtoa_r+0x60c>)
 80059bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c0:	f7fa fc7c 	bl	80002bc <__adddf3>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059cc:	f7fb f8bc 	bl	8000b48 <__aeabi_dcmpgt>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d174      	bne.n	8005abe <_dtoa_r+0x69e>
 80059d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059d8:	2000      	movs	r0, #0
 80059da:	4914      	ldr	r1, [pc, #80]	; (8005a2c <_dtoa_r+0x60c>)
 80059dc:	f7fa fc6c 	bl	80002b8 <__aeabi_dsub>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e8:	f7fb f890 	bl	8000b0c <__aeabi_dcmplt>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f43f af30 	beq.w	8005852 <_dtoa_r+0x432>
 80059f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059f6:	2b30      	cmp	r3, #48	; 0x30
 80059f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80059fc:	d002      	beq.n	8005a04 <_dtoa_r+0x5e4>
 80059fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a02:	e04a      	b.n	8005a9a <_dtoa_r+0x67a>
 8005a04:	4615      	mov	r5, r2
 8005a06:	e7f4      	b.n	80059f2 <_dtoa_r+0x5d2>
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <_dtoa_r+0x600>)
 8005a0a:	f7fa fe0d 	bl	8000628 <__aeabi_dmul>
 8005a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8005a12:	e7bc      	b.n	800598e <_dtoa_r+0x56e>
 8005a14:	08007158 	.word	0x08007158
 8005a18:	08007130 	.word	0x08007130
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	40240000 	.word	0x40240000
 8005a24:	401c0000 	.word	0x401c0000
 8005a28:	40140000 	.word	0x40140000
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a34:	465d      	mov	r5, fp
 8005a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa ff1d 	bl	800087c <__aeabi_ddiv>
 8005a42:	f7fb f8a1 	bl	8000b88 <__aeabi_d2iz>
 8005a46:	4680      	mov	r8, r0
 8005a48:	f7fa fd84 	bl	8000554 <__aeabi_i2d>
 8005a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a50:	f7fa fdea 	bl	8000628 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005a60:	f7fa fc2a 	bl	80002b8 <__aeabi_dsub>
 8005a64:	f805 6b01 	strb.w	r6, [r5], #1
 8005a68:	eba5 060b 	sub.w	r6, r5, fp
 8005a6c:	45b1      	cmp	r9, r6
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	d139      	bne.n	8005ae8 <_dtoa_r+0x6c8>
 8005a74:	f7fa fc22 	bl	80002bc <__adddf3>
 8005a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	f7fb f862 	bl	8000b48 <__aeabi_dcmpgt>
 8005a84:	b9c8      	cbnz	r0, 8005aba <_dtoa_r+0x69a>
 8005a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fb f833 	bl	8000af8 <__aeabi_dcmpeq>
 8005a92:	b110      	cbz	r0, 8005a9a <_dtoa_r+0x67a>
 8005a94:	f018 0f01 	tst.w	r8, #1
 8005a98:	d10f      	bne.n	8005aba <_dtoa_r+0x69a>
 8005a9a:	9904      	ldr	r1, [sp, #16]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 facc 	bl	800603a <_Bfree>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aa6:	702b      	strb	r3, [r5, #0]
 8005aa8:	f10a 0301 	add.w	r3, sl, #1
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8241 	beq.w	8005f38 <_dtoa_r+0xb18>
 8005ab6:	601d      	str	r5, [r3, #0]
 8005ab8:	e23e      	b.n	8005f38 <_dtoa_r+0xb18>
 8005aba:	f8cd a020 	str.w	sl, [sp, #32]
 8005abe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ac2:	2a39      	cmp	r2, #57	; 0x39
 8005ac4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005ac8:	d108      	bne.n	8005adc <_dtoa_r+0x6bc>
 8005aca:	459b      	cmp	fp, r3
 8005acc:	d10a      	bne.n	8005ae4 <_dtoa_r+0x6c4>
 8005ace:	9b08      	ldr	r3, [sp, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	9308      	str	r3, [sp, #32]
 8005ad4:	2330      	movs	r3, #48	; 0x30
 8005ad6:	f88b 3000 	strb.w	r3, [fp]
 8005ada:	465b      	mov	r3, fp
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	3201      	adds	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e78c      	b.n	80059fe <_dtoa_r+0x5de>
 8005ae4:	461d      	mov	r5, r3
 8005ae6:	e7ea      	b.n	8005abe <_dtoa_r+0x69e>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4b9b      	ldr	r3, [pc, #620]	; (8005d58 <_dtoa_r+0x938>)
 8005aec:	f7fa fd9c 	bl	8000628 <__aeabi_dmul>
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	4606      	mov	r6, r0
 8005af6:	460f      	mov	r7, r1
 8005af8:	f7fa fffe 	bl	8000af8 <__aeabi_dcmpeq>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d09a      	beq.n	8005a36 <_dtoa_r+0x616>
 8005b00:	e7cb      	b.n	8005a9a <_dtoa_r+0x67a>
 8005b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	f000 808b 	beq.w	8005c20 <_dtoa_r+0x800>
 8005b0a:	9a06      	ldr	r2, [sp, #24]
 8005b0c:	2a01      	cmp	r2, #1
 8005b0e:	dc6e      	bgt.n	8005bee <_dtoa_r+0x7ce>
 8005b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d067      	beq.n	8005be6 <_dtoa_r+0x7c6>
 8005b16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b1a:	9f07      	ldr	r7, [sp, #28]
 8005b1c:	9d05      	ldr	r5, [sp, #20]
 8005b1e:	9a05      	ldr	r2, [sp, #20]
 8005b20:	2101      	movs	r1, #1
 8005b22:	441a      	add	r2, r3
 8005b24:	4620      	mov	r0, r4
 8005b26:	9205      	str	r2, [sp, #20]
 8005b28:	4498      	add	r8, r3
 8005b2a:	f000 fb26 	bl	800617a <__i2b>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	dd0c      	ble.n	8005b4e <_dtoa_r+0x72e>
 8005b34:	f1b8 0f00 	cmp.w	r8, #0
 8005b38:	dd09      	ble.n	8005b4e <_dtoa_r+0x72e>
 8005b3a:	4545      	cmp	r5, r8
 8005b3c:	9a05      	ldr	r2, [sp, #20]
 8005b3e:	462b      	mov	r3, r5
 8005b40:	bfa8      	it	ge
 8005b42:	4643      	movge	r3, r8
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	9205      	str	r2, [sp, #20]
 8005b48:	1aed      	subs	r5, r5, r3
 8005b4a:	eba8 0803 	sub.w	r8, r8, r3
 8005b4e:	9b07      	ldr	r3, [sp, #28]
 8005b50:	b1eb      	cbz	r3, 8005b8e <_dtoa_r+0x76e>
 8005b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d067      	beq.n	8005c28 <_dtoa_r+0x808>
 8005b58:	b18f      	cbz	r7, 8005b7e <_dtoa_r+0x75e>
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	463a      	mov	r2, r7
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fbaa 	bl	80062b8 <__pow5mult>
 8005b64:	9a04      	ldr	r2, [sp, #16]
 8005b66:	4601      	mov	r1, r0
 8005b68:	4606      	mov	r6, r0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 fb0e 	bl	800618c <__multiply>
 8005b70:	9904      	ldr	r1, [sp, #16]
 8005b72:	9008      	str	r0, [sp, #32]
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fa60 	bl	800603a <_Bfree>
 8005b7a:	9b08      	ldr	r3, [sp, #32]
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	9b07      	ldr	r3, [sp, #28]
 8005b80:	1bda      	subs	r2, r3, r7
 8005b82:	d004      	beq.n	8005b8e <_dtoa_r+0x76e>
 8005b84:	9904      	ldr	r1, [sp, #16]
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fb96 	bl	80062b8 <__pow5mult>
 8005b8c:	9004      	str	r0, [sp, #16]
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 faf2 	bl	800617a <__i2b>
 8005b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b98:	4607      	mov	r7, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 81d0 	beq.w	8005f40 <_dtoa_r+0xb20>
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fb87 	bl	80062b8 <__pow5mult>
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	4607      	mov	r7, r0
 8005bb0:	dc40      	bgt.n	8005c34 <_dtoa_r+0x814>
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d139      	bne.n	8005c2c <_dtoa_r+0x80c>
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d136      	bne.n	8005c30 <_dtoa_r+0x810>
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	0d1b      	lsrs	r3, r3, #20
 8005bca:	051b      	lsls	r3, r3, #20
 8005bcc:	b12b      	cbz	r3, 8005bda <_dtoa_r+0x7ba>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	f108 0801 	add.w	r8, r8, #1
 8005bd8:	2301      	movs	r3, #1
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d12a      	bne.n	8005c38 <_dtoa_r+0x818>
 8005be2:	2001      	movs	r0, #1
 8005be4:	e030      	b.n	8005c48 <_dtoa_r+0x828>
 8005be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005be8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bec:	e795      	b.n	8005b1a <_dtoa_r+0x6fa>
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	f109 37ff 	add.w	r7, r9, #4294967295
 8005bf4:	42bb      	cmp	r3, r7
 8005bf6:	bfbf      	itttt	lt
 8005bf8:	9b07      	ldrlt	r3, [sp, #28]
 8005bfa:	9707      	strlt	r7, [sp, #28]
 8005bfc:	1afa      	sublt	r2, r7, r3
 8005bfe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c00:	bfbb      	ittet	lt
 8005c02:	189b      	addlt	r3, r3, r2
 8005c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c06:	1bdf      	subge	r7, r3, r7
 8005c08:	2700      	movlt	r7, #0
 8005c0a:	f1b9 0f00 	cmp.w	r9, #0
 8005c0e:	bfb5      	itete	lt
 8005c10:	9b05      	ldrlt	r3, [sp, #20]
 8005c12:	9d05      	ldrge	r5, [sp, #20]
 8005c14:	eba3 0509 	sublt.w	r5, r3, r9
 8005c18:	464b      	movge	r3, r9
 8005c1a:	bfb8      	it	lt
 8005c1c:	2300      	movlt	r3, #0
 8005c1e:	e77e      	b.n	8005b1e <_dtoa_r+0x6fe>
 8005c20:	9f07      	ldr	r7, [sp, #28]
 8005c22:	9d05      	ldr	r5, [sp, #20]
 8005c24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c26:	e783      	b.n	8005b30 <_dtoa_r+0x710>
 8005c28:	9a07      	ldr	r2, [sp, #28]
 8005c2a:	e7ab      	b.n	8005b84 <_dtoa_r+0x764>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e7d4      	b.n	8005bda <_dtoa_r+0x7ba>
 8005c30:	9b00      	ldr	r3, [sp, #0]
 8005c32:	e7d2      	b.n	8005bda <_dtoa_r+0x7ba>
 8005c34:	2300      	movs	r3, #0
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005c3e:	6918      	ldr	r0, [r3, #16]
 8005c40:	f000 fa4d 	bl	80060de <__hi0bits>
 8005c44:	f1c0 0020 	rsb	r0, r0, #32
 8005c48:	4440      	add	r0, r8
 8005c4a:	f010 001f 	ands.w	r0, r0, #31
 8005c4e:	d047      	beq.n	8005ce0 <_dtoa_r+0x8c0>
 8005c50:	f1c0 0320 	rsb	r3, r0, #32
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	dd3b      	ble.n	8005cd0 <_dtoa_r+0x8b0>
 8005c58:	9b05      	ldr	r3, [sp, #20]
 8005c5a:	f1c0 001c 	rsb	r0, r0, #28
 8005c5e:	4403      	add	r3, r0
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	4405      	add	r5, r0
 8005c64:	4480      	add	r8, r0
 8005c66:	9b05      	ldr	r3, [sp, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x858>
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	9904      	ldr	r1, [sp, #16]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fb6f 	bl	8006354 <__lshift>
 8005c76:	9004      	str	r0, [sp, #16]
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x86a>
 8005c7e:	4639      	mov	r1, r7
 8005c80:	4642      	mov	r2, r8
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fb66 	bl	8006354 <__lshift>
 8005c88:	4607      	mov	r7, r0
 8005c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c8c:	b353      	cbz	r3, 8005ce4 <_dtoa_r+0x8c4>
 8005c8e:	4639      	mov	r1, r7
 8005c90:	9804      	ldr	r0, [sp, #16]
 8005c92:	f000 fbb3 	bl	80063fc <__mcmp>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	da24      	bge.n	8005ce4 <_dtoa_r+0x8c4>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	220a      	movs	r2, #10
 8005c9e:	9904      	ldr	r1, [sp, #16]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 f9e1 	bl	8006068 <__multadd>
 8005ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca8:	9004      	str	r0, [sp, #16]
 8005caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 814d 	beq.w	8005f4e <_dtoa_r+0xb2e>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 f9d4 	bl	8006068 <__multadd>
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	dc4f      	bgt.n	8005d68 <_dtoa_r+0x948>
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	dd4c      	ble.n	8005d68 <_dtoa_r+0x948>
 8005cce:	e011      	b.n	8005cf4 <_dtoa_r+0x8d4>
 8005cd0:	d0c9      	beq.n	8005c66 <_dtoa_r+0x846>
 8005cd2:	9a05      	ldr	r2, [sp, #20]
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	441a      	add	r2, r3
 8005cd8:	9205      	str	r2, [sp, #20]
 8005cda:	441d      	add	r5, r3
 8005cdc:	4498      	add	r8, r3
 8005cde:	e7c2      	b.n	8005c66 <_dtoa_r+0x846>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	e7f6      	b.n	8005cd2 <_dtoa_r+0x8b2>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dc38      	bgt.n	8005d5c <_dtoa_r+0x93c>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	dd35      	ble.n	8005d5c <_dtoa_r+0x93c>
 8005cf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cf4:	9b02      	ldr	r3, [sp, #8]
 8005cf6:	b963      	cbnz	r3, 8005d12 <_dtoa_r+0x8f2>
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 f9b3 	bl	8006068 <__multadd>
 8005d02:	4601      	mov	r1, r0
 8005d04:	4607      	mov	r7, r0
 8005d06:	9804      	ldr	r0, [sp, #16]
 8005d08:	f000 fb78 	bl	80063fc <__mcmp>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f73f adcc 	bgt.w	80058aa <_dtoa_r+0x48a>
 8005d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d14:	465d      	mov	r5, fp
 8005d16:	ea6f 0a03 	mvn.w	sl, r3
 8005d1a:	f04f 0900 	mov.w	r9, #0
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f98a 	bl	800603a <_Bfree>
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	f43f aeb7 	beq.w	8005a9a <_dtoa_r+0x67a>
 8005d2c:	f1b9 0f00 	cmp.w	r9, #0
 8005d30:	d005      	beq.n	8005d3e <_dtoa_r+0x91e>
 8005d32:	45b1      	cmp	r9, r6
 8005d34:	d003      	beq.n	8005d3e <_dtoa_r+0x91e>
 8005d36:	4649      	mov	r1, r9
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 f97e 	bl	800603a <_Bfree>
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f97a 	bl	800603a <_Bfree>
 8005d46:	e6a8      	b.n	8005a9a <_dtoa_r+0x67a>
 8005d48:	2700      	movs	r7, #0
 8005d4a:	463e      	mov	r6, r7
 8005d4c:	e7e1      	b.n	8005d12 <_dtoa_r+0x8f2>
 8005d4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d52:	463e      	mov	r6, r7
 8005d54:	e5a9      	b.n	80058aa <_dtoa_r+0x48a>
 8005d56:	bf00      	nop
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80fa 	beq.w	8005f5c <_dtoa_r+0xb3c>
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	dd05      	ble.n	8005d78 <_dtoa_r+0x958>
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 faef 	bl	8006354 <__lshift>
 8005d76:	4606      	mov	r6, r0
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d04c      	beq.n	8005e18 <_dtoa_r+0x9f8>
 8005d7e:	6871      	ldr	r1, [r6, #4]
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f926 	bl	8005fd2 <_Balloc>
 8005d86:	6932      	ldr	r2, [r6, #16]
 8005d88:	3202      	adds	r2, #2
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	0092      	lsls	r2, r2, #2
 8005d8e:	f106 010c 	add.w	r1, r6, #12
 8005d92:	300c      	adds	r0, #12
 8005d94:	f000 f912 	bl	8005fbc <memcpy>
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fad9 	bl	8006354 <__lshift>
 8005da2:	9b00      	ldr	r3, [sp, #0]
 8005da4:	f8cd b014 	str.w	fp, [sp, #20]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	46b1      	mov	r9, r6
 8005dae:	9307      	str	r3, [sp, #28]
 8005db0:	4606      	mov	r6, r0
 8005db2:	4639      	mov	r1, r7
 8005db4:	9804      	ldr	r0, [sp, #16]
 8005db6:	f7ff faa6 	bl	8005306 <quorem>
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005dc2:	9804      	ldr	r0, [sp, #16]
 8005dc4:	f000 fb1a 	bl	80063fc <__mcmp>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	9000      	str	r0, [sp, #0]
 8005dcc:	4639      	mov	r1, r7
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 fb2e 	bl	8006430 <__mdiff>
 8005dd4:	68c3      	ldr	r3, [r0, #12]
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	bb03      	cbnz	r3, 8005e1c <_dtoa_r+0x9fc>
 8005dda:	4601      	mov	r1, r0
 8005ddc:	9008      	str	r0, [sp, #32]
 8005dde:	9804      	ldr	r0, [sp, #16]
 8005de0:	f000 fb0c 	bl	80063fc <__mcmp>
 8005de4:	9a08      	ldr	r2, [sp, #32]
 8005de6:	4603      	mov	r3, r0
 8005de8:	4611      	mov	r1, r2
 8005dea:	4620      	mov	r0, r4
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	f000 f924 	bl	800603a <_Bfree>
 8005df2:	9b08      	ldr	r3, [sp, #32]
 8005df4:	b9a3      	cbnz	r3, 8005e20 <_dtoa_r+0xa00>
 8005df6:	9a06      	ldr	r2, [sp, #24]
 8005df8:	b992      	cbnz	r2, 8005e20 <_dtoa_r+0xa00>
 8005dfa:	9a07      	ldr	r2, [sp, #28]
 8005dfc:	b982      	cbnz	r2, 8005e20 <_dtoa_r+0xa00>
 8005dfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e02:	d029      	beq.n	8005e58 <_dtoa_r+0xa38>
 8005e04:	9b00      	ldr	r3, [sp, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd01      	ble.n	8005e0e <_dtoa_r+0x9ee>
 8005e0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	1c5d      	adds	r5, r3, #1
 8005e12:	f883 8000 	strb.w	r8, [r3]
 8005e16:	e782      	b.n	8005d1e <_dtoa_r+0x8fe>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	e7c2      	b.n	8005da2 <_dtoa_r+0x982>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7e3      	b.n	8005de8 <_dtoa_r+0x9c8>
 8005e20:	9a00      	ldr	r2, [sp, #0]
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	db04      	blt.n	8005e30 <_dtoa_r+0xa10>
 8005e26:	d125      	bne.n	8005e74 <_dtoa_r+0xa54>
 8005e28:	9a06      	ldr	r2, [sp, #24]
 8005e2a:	bb1a      	cbnz	r2, 8005e74 <_dtoa_r+0xa54>
 8005e2c:	9a07      	ldr	r2, [sp, #28]
 8005e2e:	bb0a      	cbnz	r2, 8005e74 <_dtoa_r+0xa54>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	ddec      	ble.n	8005e0e <_dtoa_r+0x9ee>
 8005e34:	2201      	movs	r2, #1
 8005e36:	9904      	ldr	r1, [sp, #16]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fa8b 	bl	8006354 <__lshift>
 8005e3e:	4639      	mov	r1, r7
 8005e40:	9004      	str	r0, [sp, #16]
 8005e42:	f000 fadb 	bl	80063fc <__mcmp>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	dc03      	bgt.n	8005e52 <_dtoa_r+0xa32>
 8005e4a:	d1e0      	bne.n	8005e0e <_dtoa_r+0x9ee>
 8005e4c:	f018 0f01 	tst.w	r8, #1
 8005e50:	d0dd      	beq.n	8005e0e <_dtoa_r+0x9ee>
 8005e52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e56:	d1d8      	bne.n	8005e0a <_dtoa_r+0x9ea>
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	9a05      	ldr	r2, [sp, #20]
 8005e5c:	1c5d      	adds	r5, r3, #1
 8005e5e:	2339      	movs	r3, #57	; 0x39
 8005e60:	7013      	strb	r3, [r2, #0]
 8005e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e66:	2b39      	cmp	r3, #57	; 0x39
 8005e68:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e6c:	d04f      	beq.n	8005f0e <_dtoa_r+0xaee>
 8005e6e:	3301      	adds	r3, #1
 8005e70:	7013      	strb	r3, [r2, #0]
 8005e72:	e754      	b.n	8005d1e <_dtoa_r+0x8fe>
 8005e74:	9a05      	ldr	r2, [sp, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f102 0501 	add.w	r5, r2, #1
 8005e7c:	dd06      	ble.n	8005e8c <_dtoa_r+0xa6c>
 8005e7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e82:	d0e9      	beq.n	8005e58 <_dtoa_r+0xa38>
 8005e84:	f108 0801 	add.w	r8, r8, #1
 8005e88:	9b05      	ldr	r3, [sp, #20]
 8005e8a:	e7c2      	b.n	8005e12 <_dtoa_r+0x9f2>
 8005e8c:	9a02      	ldr	r2, [sp, #8]
 8005e8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e92:	eba5 030b 	sub.w	r3, r5, fp
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d021      	beq.n	8005ede <_dtoa_r+0xabe>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	9904      	ldr	r1, [sp, #16]
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f8e1 	bl	8006068 <__multadd>
 8005ea6:	45b1      	cmp	r9, r6
 8005ea8:	9004      	str	r0, [sp, #16]
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	f04f 020a 	mov.w	r2, #10
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	d105      	bne.n	8005ec4 <_dtoa_r+0xaa4>
 8005eb8:	f000 f8d6 	bl	8006068 <__multadd>
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	9505      	str	r5, [sp, #20]
 8005ec2:	e776      	b.n	8005db2 <_dtoa_r+0x992>
 8005ec4:	f000 f8d0 	bl	8006068 <__multadd>
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4681      	mov	r9, r0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	220a      	movs	r2, #10
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 f8c9 	bl	8006068 <__multadd>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	e7f2      	b.n	8005ec0 <_dtoa_r+0xaa0>
 8005eda:	f04f 0900 	mov.w	r9, #0
 8005ede:	2201      	movs	r2, #1
 8005ee0:	9904      	ldr	r1, [sp, #16]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fa36 	bl	8006354 <__lshift>
 8005ee8:	4639      	mov	r1, r7
 8005eea:	9004      	str	r0, [sp, #16]
 8005eec:	f000 fa86 	bl	80063fc <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dcb6      	bgt.n	8005e62 <_dtoa_r+0xa42>
 8005ef4:	d102      	bne.n	8005efc <_dtoa_r+0xadc>
 8005ef6:	f018 0f01 	tst.w	r8, #1
 8005efa:	d1b2      	bne.n	8005e62 <_dtoa_r+0xa42>
 8005efc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f00:	2b30      	cmp	r3, #48	; 0x30
 8005f02:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f06:	f47f af0a 	bne.w	8005d1e <_dtoa_r+0x8fe>
 8005f0a:	4615      	mov	r5, r2
 8005f0c:	e7f6      	b.n	8005efc <_dtoa_r+0xadc>
 8005f0e:	4593      	cmp	fp, r2
 8005f10:	d105      	bne.n	8005f1e <_dtoa_r+0xafe>
 8005f12:	2331      	movs	r3, #49	; 0x31
 8005f14:	f10a 0a01 	add.w	sl, sl, #1
 8005f18:	f88b 3000 	strb.w	r3, [fp]
 8005f1c:	e6ff      	b.n	8005d1e <_dtoa_r+0x8fe>
 8005f1e:	4615      	mov	r5, r2
 8005f20:	e79f      	b.n	8005e62 <_dtoa_r+0xa42>
 8005f22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f88 <_dtoa_r+0xb68>
 8005f26:	e007      	b.n	8005f38 <_dtoa_r+0xb18>
 8005f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f8c <_dtoa_r+0xb6c>
 8005f2e:	b11b      	cbz	r3, 8005f38 <_dtoa_r+0xb18>
 8005f30:	f10b 0308 	add.w	r3, fp, #8
 8005f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4658      	mov	r0, fp
 8005f3a:	b017      	add	sp, #92	; 0x5c
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	9b06      	ldr	r3, [sp, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	f77f ae35 	ble.w	8005bb2 <_dtoa_r+0x792>
 8005f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	e649      	b.n	8005be2 <_dtoa_r+0x7c2>
 8005f4e:	9b02      	ldr	r3, [sp, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dc03      	bgt.n	8005f5c <_dtoa_r+0xb3c>
 8005f54:	9b06      	ldr	r3, [sp, #24]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	f73f aecc 	bgt.w	8005cf4 <_dtoa_r+0x8d4>
 8005f5c:	465d      	mov	r5, fp
 8005f5e:	4639      	mov	r1, r7
 8005f60:	9804      	ldr	r0, [sp, #16]
 8005f62:	f7ff f9d0 	bl	8005306 <quorem>
 8005f66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f6a:	f805 8b01 	strb.w	r8, [r5], #1
 8005f6e:	9a02      	ldr	r2, [sp, #8]
 8005f70:	eba5 030b 	sub.w	r3, r5, fp
 8005f74:	429a      	cmp	r2, r3
 8005f76:	ddb0      	ble.n	8005eda <_dtoa_r+0xaba>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	220a      	movs	r2, #10
 8005f7c:	9904      	ldr	r1, [sp, #16]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f872 	bl	8006068 <__multadd>
 8005f84:	9004      	str	r0, [sp, #16]
 8005f86:	e7ea      	b.n	8005f5e <_dtoa_r+0xb3e>
 8005f88:	080070f8 	.word	0x080070f8
 8005f8c:	0800711c 	.word	0x0800711c

08005f90 <_localeconv_r>:
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <_localeconv_r+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a18      	ldr	r0, [r3, #32]
 8005f96:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <_localeconv_r+0x18>)
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	bf08      	it	eq
 8005f9c:	4618      	moveq	r0, r3
 8005f9e:	30f0      	adds	r0, #240	; 0xf0
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000001c 	.word	0x2000001c
 8005fa8:	20000080 	.word	0x20000080

08005fac <malloc>:
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <malloc+0xc>)
 8005fae:	4601      	mov	r1, r0
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	f000 bb45 	b.w	8006640 <_malloc_r>
 8005fb6:	bf00      	nop
 8005fb8:	2000001c 	.word	0x2000001c

08005fbc <memcpy>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	1e43      	subs	r3, r0, #1
 8005fc0:	440a      	add	r2, r1
 8005fc2:	4291      	cmp	r1, r2
 8005fc4:	d100      	bne.n	8005fc8 <memcpy+0xc>
 8005fc6:	bd10      	pop	{r4, pc}
 8005fc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd0:	e7f7      	b.n	8005fc2 <memcpy+0x6>

08005fd2 <_Balloc>:
 8005fd2:	b570      	push	{r4, r5, r6, lr}
 8005fd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460e      	mov	r6, r1
 8005fda:	b93d      	cbnz	r5, 8005fec <_Balloc+0x1a>
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f7ff ffe5 	bl	8005fac <malloc>
 8005fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8005fe4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fe8:	6005      	str	r5, [r0, #0]
 8005fea:	60c5      	str	r5, [r0, #12]
 8005fec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fee:	68eb      	ldr	r3, [r5, #12]
 8005ff0:	b183      	cbz	r3, 8006014 <_Balloc+0x42>
 8005ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ffa:	b9b8      	cbnz	r0, 800602c <_Balloc+0x5a>
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f506 	lsl.w	r5, r1, r6
 8006002:	1d6a      	adds	r2, r5, #5
 8006004:	0092      	lsls	r2, r2, #2
 8006006:	4620      	mov	r0, r4
 8006008:	f000 fabe 	bl	8006588 <_calloc_r>
 800600c:	b160      	cbz	r0, 8006028 <_Balloc+0x56>
 800600e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006012:	e00e      	b.n	8006032 <_Balloc+0x60>
 8006014:	2221      	movs	r2, #33	; 0x21
 8006016:	2104      	movs	r1, #4
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fab5 	bl	8006588 <_calloc_r>
 800601e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006020:	60e8      	str	r0, [r5, #12]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <_Balloc+0x20>
 8006028:	2000      	movs	r0, #0
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	6802      	ldr	r2, [r0, #0]
 800602e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006032:	2300      	movs	r3, #0
 8006034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006038:	e7f7      	b.n	800602a <_Balloc+0x58>

0800603a <_Bfree>:
 800603a:	b570      	push	{r4, r5, r6, lr}
 800603c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800603e:	4606      	mov	r6, r0
 8006040:	460d      	mov	r5, r1
 8006042:	b93c      	cbnz	r4, 8006054 <_Bfree+0x1a>
 8006044:	2010      	movs	r0, #16
 8006046:	f7ff ffb1 	bl	8005fac <malloc>
 800604a:	6270      	str	r0, [r6, #36]	; 0x24
 800604c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006050:	6004      	str	r4, [r0, #0]
 8006052:	60c4      	str	r4, [r0, #12]
 8006054:	b13d      	cbz	r5, 8006066 <_Bfree+0x2c>
 8006056:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006058:	686a      	ldr	r2, [r5, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006060:	6029      	str	r1, [r5, #0]
 8006062:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006066:	bd70      	pop	{r4, r5, r6, pc}

08006068 <__multadd>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	690d      	ldr	r5, [r1, #16]
 800606e:	461f      	mov	r7, r3
 8006070:	4606      	mov	r6, r0
 8006072:	460c      	mov	r4, r1
 8006074:	f101 0c14 	add.w	ip, r1, #20
 8006078:	2300      	movs	r3, #0
 800607a:	f8dc 0000 	ldr.w	r0, [ip]
 800607e:	b281      	uxth	r1, r0
 8006080:	fb02 7101 	mla	r1, r2, r1, r7
 8006084:	0c0f      	lsrs	r7, r1, #16
 8006086:	0c00      	lsrs	r0, r0, #16
 8006088:	fb02 7000 	mla	r0, r2, r0, r7
 800608c:	b289      	uxth	r1, r1
 800608e:	3301      	adds	r3, #1
 8006090:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006094:	429d      	cmp	r5, r3
 8006096:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800609a:	f84c 1b04 	str.w	r1, [ip], #4
 800609e:	dcec      	bgt.n	800607a <__multadd+0x12>
 80060a0:	b1d7      	cbz	r7, 80060d8 <__multadd+0x70>
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dc12      	bgt.n	80060ce <__multadd+0x66>
 80060a8:	6861      	ldr	r1, [r4, #4]
 80060aa:	4630      	mov	r0, r6
 80060ac:	3101      	adds	r1, #1
 80060ae:	f7ff ff90 	bl	8005fd2 <_Balloc>
 80060b2:	6922      	ldr	r2, [r4, #16]
 80060b4:	3202      	adds	r2, #2
 80060b6:	f104 010c 	add.w	r1, r4, #12
 80060ba:	4680      	mov	r8, r0
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	300c      	adds	r0, #12
 80060c0:	f7ff ff7c 	bl	8005fbc <memcpy>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7ff ffb7 	bl	800603a <_Bfree>
 80060cc:	4644      	mov	r4, r8
 80060ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060d2:	3501      	adds	r5, #1
 80060d4:	615f      	str	r7, [r3, #20]
 80060d6:	6125      	str	r5, [r4, #16]
 80060d8:	4620      	mov	r0, r4
 80060da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060de <__hi0bits>:
 80060de:	0c02      	lsrs	r2, r0, #16
 80060e0:	0412      	lsls	r2, r2, #16
 80060e2:	4603      	mov	r3, r0
 80060e4:	b9b2      	cbnz	r2, 8006114 <__hi0bits+0x36>
 80060e6:	0403      	lsls	r3, r0, #16
 80060e8:	2010      	movs	r0, #16
 80060ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060ee:	bf04      	itt	eq
 80060f0:	021b      	lsleq	r3, r3, #8
 80060f2:	3008      	addeq	r0, #8
 80060f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060f8:	bf04      	itt	eq
 80060fa:	011b      	lsleq	r3, r3, #4
 80060fc:	3004      	addeq	r0, #4
 80060fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006102:	bf04      	itt	eq
 8006104:	009b      	lsleq	r3, r3, #2
 8006106:	3002      	addeq	r0, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	db06      	blt.n	800611a <__hi0bits+0x3c>
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	d503      	bpl.n	8006118 <__hi0bits+0x3a>
 8006110:	3001      	adds	r0, #1
 8006112:	4770      	bx	lr
 8006114:	2000      	movs	r0, #0
 8006116:	e7e8      	b.n	80060ea <__hi0bits+0xc>
 8006118:	2020      	movs	r0, #32
 800611a:	4770      	bx	lr

0800611c <__lo0bits>:
 800611c:	6803      	ldr	r3, [r0, #0]
 800611e:	f013 0207 	ands.w	r2, r3, #7
 8006122:	4601      	mov	r1, r0
 8006124:	d00b      	beq.n	800613e <__lo0bits+0x22>
 8006126:	07da      	lsls	r2, r3, #31
 8006128:	d423      	bmi.n	8006172 <__lo0bits+0x56>
 800612a:	0798      	lsls	r0, r3, #30
 800612c:	bf49      	itett	mi
 800612e:	085b      	lsrmi	r3, r3, #1
 8006130:	089b      	lsrpl	r3, r3, #2
 8006132:	2001      	movmi	r0, #1
 8006134:	600b      	strmi	r3, [r1, #0]
 8006136:	bf5c      	itt	pl
 8006138:	600b      	strpl	r3, [r1, #0]
 800613a:	2002      	movpl	r0, #2
 800613c:	4770      	bx	lr
 800613e:	b298      	uxth	r0, r3
 8006140:	b9a8      	cbnz	r0, 800616e <__lo0bits+0x52>
 8006142:	0c1b      	lsrs	r3, r3, #16
 8006144:	2010      	movs	r0, #16
 8006146:	f013 0fff 	tst.w	r3, #255	; 0xff
 800614a:	bf04      	itt	eq
 800614c:	0a1b      	lsreq	r3, r3, #8
 800614e:	3008      	addeq	r0, #8
 8006150:	071a      	lsls	r2, r3, #28
 8006152:	bf04      	itt	eq
 8006154:	091b      	lsreq	r3, r3, #4
 8006156:	3004      	addeq	r0, #4
 8006158:	079a      	lsls	r2, r3, #30
 800615a:	bf04      	itt	eq
 800615c:	089b      	lsreq	r3, r3, #2
 800615e:	3002      	addeq	r0, #2
 8006160:	07da      	lsls	r2, r3, #31
 8006162:	d402      	bmi.n	800616a <__lo0bits+0x4e>
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	d006      	beq.n	8006176 <__lo0bits+0x5a>
 8006168:	3001      	adds	r0, #1
 800616a:	600b      	str	r3, [r1, #0]
 800616c:	4770      	bx	lr
 800616e:	4610      	mov	r0, r2
 8006170:	e7e9      	b.n	8006146 <__lo0bits+0x2a>
 8006172:	2000      	movs	r0, #0
 8006174:	4770      	bx	lr
 8006176:	2020      	movs	r0, #32
 8006178:	4770      	bx	lr

0800617a <__i2b>:
 800617a:	b510      	push	{r4, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	2101      	movs	r1, #1
 8006180:	f7ff ff27 	bl	8005fd2 <_Balloc>
 8006184:	2201      	movs	r2, #1
 8006186:	6144      	str	r4, [r0, #20]
 8006188:	6102      	str	r2, [r0, #16]
 800618a:	bd10      	pop	{r4, pc}

0800618c <__multiply>:
 800618c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	4614      	mov	r4, r2
 8006192:	690a      	ldr	r2, [r1, #16]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	429a      	cmp	r2, r3
 8006198:	bfb8      	it	lt
 800619a:	460b      	movlt	r3, r1
 800619c:	4688      	mov	r8, r1
 800619e:	bfbc      	itt	lt
 80061a0:	46a0      	movlt	r8, r4
 80061a2:	461c      	movlt	r4, r3
 80061a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061b4:	eb07 0609 	add.w	r6, r7, r9
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	bfb8      	it	lt
 80061bc:	3101      	addlt	r1, #1
 80061be:	f7ff ff08 	bl	8005fd2 <_Balloc>
 80061c2:	f100 0514 	add.w	r5, r0, #20
 80061c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80061ca:	462b      	mov	r3, r5
 80061cc:	2200      	movs	r2, #0
 80061ce:	4573      	cmp	r3, lr
 80061d0:	d316      	bcc.n	8006200 <__multiply+0x74>
 80061d2:	f104 0214 	add.w	r2, r4, #20
 80061d6:	f108 0114 	add.w	r1, r8, #20
 80061da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	9201      	str	r2, [sp, #4]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d80c      	bhi.n	8006206 <__multiply+0x7a>
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	dd03      	ble.n	80061f8 <__multiply+0x6c>
 80061f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d05d      	beq.n	80062b4 <__multiply+0x128>
 80061f8:	6106      	str	r6, [r0, #16]
 80061fa:	b003      	add	sp, #12
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	f843 2b04 	str.w	r2, [r3], #4
 8006204:	e7e3      	b.n	80061ce <__multiply+0x42>
 8006206:	f8b2 b000 	ldrh.w	fp, [r2]
 800620a:	f1bb 0f00 	cmp.w	fp, #0
 800620e:	d023      	beq.n	8006258 <__multiply+0xcc>
 8006210:	4689      	mov	r9, r1
 8006212:	46ac      	mov	ip, r5
 8006214:	f04f 0800 	mov.w	r8, #0
 8006218:	f859 4b04 	ldr.w	r4, [r9], #4
 800621c:	f8dc a000 	ldr.w	sl, [ip]
 8006220:	b2a3      	uxth	r3, r4
 8006222:	fa1f fa8a 	uxth.w	sl, sl
 8006226:	fb0b a303 	mla	r3, fp, r3, sl
 800622a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800622e:	f8dc 4000 	ldr.w	r4, [ip]
 8006232:	4443      	add	r3, r8
 8006234:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006238:	fb0b 840a 	mla	r4, fp, sl, r8
 800623c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006240:	46e2      	mov	sl, ip
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006248:	454f      	cmp	r7, r9
 800624a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800624e:	f84a 3b04 	str.w	r3, [sl], #4
 8006252:	d82b      	bhi.n	80062ac <__multiply+0x120>
 8006254:	f8cc 8004 	str.w	r8, [ip, #4]
 8006258:	9b01      	ldr	r3, [sp, #4]
 800625a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800625e:	3204      	adds	r2, #4
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	d020      	beq.n	80062a8 <__multiply+0x11c>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	4689      	mov	r9, r1
 800626a:	46a8      	mov	r8, r5
 800626c:	f04f 0b00 	mov.w	fp, #0
 8006270:	f8b9 c000 	ldrh.w	ip, [r9]
 8006274:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006278:	fb0a 440c 	mla	r4, sl, ip, r4
 800627c:	445c      	add	r4, fp
 800627e:	46c4      	mov	ip, r8
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006286:	f84c 3b04 	str.w	r3, [ip], #4
 800628a:	f859 3b04 	ldr.w	r3, [r9], #4
 800628e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	fb0a b303 	mla	r3, sl, r3, fp
 8006298:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800629c:	454f      	cmp	r7, r9
 800629e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80062a2:	d805      	bhi.n	80062b0 <__multiply+0x124>
 80062a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80062a8:	3504      	adds	r5, #4
 80062aa:	e79b      	b.n	80061e4 <__multiply+0x58>
 80062ac:	46d4      	mov	ip, sl
 80062ae:	e7b3      	b.n	8006218 <__multiply+0x8c>
 80062b0:	46e0      	mov	r8, ip
 80062b2:	e7dd      	b.n	8006270 <__multiply+0xe4>
 80062b4:	3e01      	subs	r6, #1
 80062b6:	e799      	b.n	80061ec <__multiply+0x60>

080062b8 <__pow5mult>:
 80062b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062bc:	4615      	mov	r5, r2
 80062be:	f012 0203 	ands.w	r2, r2, #3
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	d007      	beq.n	80062d8 <__pow5mult+0x20>
 80062c8:	3a01      	subs	r2, #1
 80062ca:	4c21      	ldr	r4, [pc, #132]	; (8006350 <__pow5mult+0x98>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062d2:	f7ff fec9 	bl	8006068 <__multadd>
 80062d6:	4607      	mov	r7, r0
 80062d8:	10ad      	asrs	r5, r5, #2
 80062da:	d035      	beq.n	8006348 <__pow5mult+0x90>
 80062dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062de:	b93c      	cbnz	r4, 80062f0 <__pow5mult+0x38>
 80062e0:	2010      	movs	r0, #16
 80062e2:	f7ff fe63 	bl	8005fac <malloc>
 80062e6:	6270      	str	r0, [r6, #36]	; 0x24
 80062e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062ec:	6004      	str	r4, [r0, #0]
 80062ee:	60c4      	str	r4, [r0, #12]
 80062f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f8:	b94c      	cbnz	r4, 800630e <__pow5mult+0x56>
 80062fa:	f240 2171 	movw	r1, #625	; 0x271
 80062fe:	4630      	mov	r0, r6
 8006300:	f7ff ff3b 	bl	800617a <__i2b>
 8006304:	2300      	movs	r3, #0
 8006306:	f8c8 0008 	str.w	r0, [r8, #8]
 800630a:	4604      	mov	r4, r0
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	f04f 0800 	mov.w	r8, #0
 8006312:	07eb      	lsls	r3, r5, #31
 8006314:	d50a      	bpl.n	800632c <__pow5mult+0x74>
 8006316:	4639      	mov	r1, r7
 8006318:	4622      	mov	r2, r4
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff36 	bl	800618c <__multiply>
 8006320:	4639      	mov	r1, r7
 8006322:	4681      	mov	r9, r0
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff fe88 	bl	800603a <_Bfree>
 800632a:	464f      	mov	r7, r9
 800632c:	106d      	asrs	r5, r5, #1
 800632e:	d00b      	beq.n	8006348 <__pow5mult+0x90>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	b938      	cbnz	r0, 8006344 <__pow5mult+0x8c>
 8006334:	4622      	mov	r2, r4
 8006336:	4621      	mov	r1, r4
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff ff27 	bl	800618c <__multiply>
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	f8c0 8000 	str.w	r8, [r0]
 8006344:	4604      	mov	r4, r0
 8006346:	e7e4      	b.n	8006312 <__pow5mult+0x5a>
 8006348:	4638      	mov	r0, r7
 800634a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634e:	bf00      	nop
 8006350:	08007220 	.word	0x08007220

08006354 <__lshift>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	6849      	ldr	r1, [r1, #4]
 8006362:	eb0a 0903 	add.w	r9, sl, r3
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	4607      	mov	r7, r0
 800636a:	4616      	mov	r6, r2
 800636c:	f109 0501 	add.w	r5, r9, #1
 8006370:	42ab      	cmp	r3, r5
 8006372:	db32      	blt.n	80063da <__lshift+0x86>
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fe2c 	bl	8005fd2 <_Balloc>
 800637a:	2300      	movs	r3, #0
 800637c:	4680      	mov	r8, r0
 800637e:	f100 0114 	add.w	r1, r0, #20
 8006382:	461a      	mov	r2, r3
 8006384:	4553      	cmp	r3, sl
 8006386:	db2b      	blt.n	80063e0 <__lshift+0x8c>
 8006388:	6920      	ldr	r0, [r4, #16]
 800638a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800638e:	f104 0314 	add.w	r3, r4, #20
 8006392:	f016 021f 	ands.w	r2, r6, #31
 8006396:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800639a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800639e:	d025      	beq.n	80063ec <__lshift+0x98>
 80063a0:	f1c2 0e20 	rsb	lr, r2, #32
 80063a4:	2000      	movs	r0, #0
 80063a6:	681e      	ldr	r6, [r3, #0]
 80063a8:	468a      	mov	sl, r1
 80063aa:	4096      	lsls	r6, r2
 80063ac:	4330      	orrs	r0, r6
 80063ae:	f84a 0b04 	str.w	r0, [sl], #4
 80063b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80063b6:	459c      	cmp	ip, r3
 80063b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80063bc:	d814      	bhi.n	80063e8 <__lshift+0x94>
 80063be:	6048      	str	r0, [r1, #4]
 80063c0:	b108      	cbz	r0, 80063c6 <__lshift+0x72>
 80063c2:	f109 0502 	add.w	r5, r9, #2
 80063c6:	3d01      	subs	r5, #1
 80063c8:	4638      	mov	r0, r7
 80063ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80063ce:	4621      	mov	r1, r4
 80063d0:	f7ff fe33 	bl	800603a <_Bfree>
 80063d4:	4640      	mov	r0, r8
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	3101      	adds	r1, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	e7c7      	b.n	8006370 <__lshift+0x1c>
 80063e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063e4:	3301      	adds	r3, #1
 80063e6:	e7cd      	b.n	8006384 <__lshift+0x30>
 80063e8:	4651      	mov	r1, sl
 80063ea:	e7dc      	b.n	80063a6 <__lshift+0x52>
 80063ec:	3904      	subs	r1, #4
 80063ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80063f6:	459c      	cmp	ip, r3
 80063f8:	d8f9      	bhi.n	80063ee <__lshift+0x9a>
 80063fa:	e7e4      	b.n	80063c6 <__lshift+0x72>

080063fc <__mcmp>:
 80063fc:	6903      	ldr	r3, [r0, #16]
 80063fe:	690a      	ldr	r2, [r1, #16]
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	b530      	push	{r4, r5, lr}
 8006404:	d10c      	bne.n	8006420 <__mcmp+0x24>
 8006406:	0092      	lsls	r2, r2, #2
 8006408:	3014      	adds	r0, #20
 800640a:	3114      	adds	r1, #20
 800640c:	1884      	adds	r4, r0, r2
 800640e:	4411      	add	r1, r2
 8006410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006418:	4295      	cmp	r5, r2
 800641a:	d003      	beq.n	8006424 <__mcmp+0x28>
 800641c:	d305      	bcc.n	800642a <__mcmp+0x2e>
 800641e:	2301      	movs	r3, #1
 8006420:	4618      	mov	r0, r3
 8006422:	bd30      	pop	{r4, r5, pc}
 8006424:	42a0      	cmp	r0, r4
 8006426:	d3f3      	bcc.n	8006410 <__mcmp+0x14>
 8006428:	e7fa      	b.n	8006420 <__mcmp+0x24>
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	e7f7      	b.n	8006420 <__mcmp+0x24>

08006430 <__mdiff>:
 8006430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	460d      	mov	r5, r1
 8006436:	4607      	mov	r7, r0
 8006438:	4611      	mov	r1, r2
 800643a:	4628      	mov	r0, r5
 800643c:	4614      	mov	r4, r2
 800643e:	f7ff ffdd 	bl	80063fc <__mcmp>
 8006442:	1e06      	subs	r6, r0, #0
 8006444:	d108      	bne.n	8006458 <__mdiff+0x28>
 8006446:	4631      	mov	r1, r6
 8006448:	4638      	mov	r0, r7
 800644a:	f7ff fdc2 	bl	8005fd2 <_Balloc>
 800644e:	2301      	movs	r3, #1
 8006450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	bfa4      	itt	ge
 800645a:	4623      	movge	r3, r4
 800645c:	462c      	movge	r4, r5
 800645e:	4638      	mov	r0, r7
 8006460:	6861      	ldr	r1, [r4, #4]
 8006462:	bfa6      	itte	ge
 8006464:	461d      	movge	r5, r3
 8006466:	2600      	movge	r6, #0
 8006468:	2601      	movlt	r6, #1
 800646a:	f7ff fdb2 	bl	8005fd2 <_Balloc>
 800646e:	692b      	ldr	r3, [r5, #16]
 8006470:	60c6      	str	r6, [r0, #12]
 8006472:	6926      	ldr	r6, [r4, #16]
 8006474:	f105 0914 	add.w	r9, r5, #20
 8006478:	f104 0214 	add.w	r2, r4, #20
 800647c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006480:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006484:	f100 0514 	add.w	r5, r0, #20
 8006488:	f04f 0e00 	mov.w	lr, #0
 800648c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006490:	f859 4b04 	ldr.w	r4, [r9], #4
 8006494:	fa1e f18a 	uxtah	r1, lr, sl
 8006498:	b2a3      	uxth	r3, r4
 800649a:	1ac9      	subs	r1, r1, r3
 800649c:	0c23      	lsrs	r3, r4, #16
 800649e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80064a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064a6:	b289      	uxth	r1, r1
 80064a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80064ac:	45c8      	cmp	r8, r9
 80064ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064b2:	4694      	mov	ip, r2
 80064b4:	f845 3b04 	str.w	r3, [r5], #4
 80064b8:	d8e8      	bhi.n	800648c <__mdiff+0x5c>
 80064ba:	45bc      	cmp	ip, r7
 80064bc:	d304      	bcc.n	80064c8 <__mdiff+0x98>
 80064be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80064c2:	b183      	cbz	r3, 80064e6 <__mdiff+0xb6>
 80064c4:	6106      	str	r6, [r0, #16]
 80064c6:	e7c5      	b.n	8006454 <__mdiff+0x24>
 80064c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80064cc:	fa1e f381 	uxtah	r3, lr, r1
 80064d0:	141a      	asrs	r2, r3, #16
 80064d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80064e0:	f845 3b04 	str.w	r3, [r5], #4
 80064e4:	e7e9      	b.n	80064ba <__mdiff+0x8a>
 80064e6:	3e01      	subs	r6, #1
 80064e8:	e7e9      	b.n	80064be <__mdiff+0x8e>

080064ea <__d2b>:
 80064ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064ee:	460e      	mov	r6, r1
 80064f0:	2101      	movs	r1, #1
 80064f2:	ec59 8b10 	vmov	r8, r9, d0
 80064f6:	4615      	mov	r5, r2
 80064f8:	f7ff fd6b 	bl	8005fd2 <_Balloc>
 80064fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006500:	4607      	mov	r7, r0
 8006502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006506:	bb34      	cbnz	r4, 8006556 <__d2b+0x6c>
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f1b8 0300 	subs.w	r3, r8, #0
 800650e:	d027      	beq.n	8006560 <__d2b+0x76>
 8006510:	a802      	add	r0, sp, #8
 8006512:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006516:	f7ff fe01 	bl	800611c <__lo0bits>
 800651a:	9900      	ldr	r1, [sp, #0]
 800651c:	b1f0      	cbz	r0, 800655c <__d2b+0x72>
 800651e:	9a01      	ldr	r2, [sp, #4]
 8006520:	f1c0 0320 	rsb	r3, r0, #32
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	430b      	orrs	r3, r1
 800652a:	40c2      	lsrs	r2, r0
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	9b01      	ldr	r3, [sp, #4]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2102      	movne	r1, #2
 800653a:	2101      	moveq	r1, #1
 800653c:	6139      	str	r1, [r7, #16]
 800653e:	b1c4      	cbz	r4, 8006572 <__d2b+0x88>
 8006540:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006544:	4404      	add	r4, r0
 8006546:	6034      	str	r4, [r6, #0]
 8006548:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800654c:	6028      	str	r0, [r5, #0]
 800654e:	4638      	mov	r0, r7
 8006550:	b003      	add	sp, #12
 8006552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800655a:	e7d5      	b.n	8006508 <__d2b+0x1e>
 800655c:	6179      	str	r1, [r7, #20]
 800655e:	e7e7      	b.n	8006530 <__d2b+0x46>
 8006560:	a801      	add	r0, sp, #4
 8006562:	f7ff fddb 	bl	800611c <__lo0bits>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	2101      	movs	r1, #1
 800656c:	6139      	str	r1, [r7, #16]
 800656e:	3020      	adds	r0, #32
 8006570:	e7e5      	b.n	800653e <__d2b+0x54>
 8006572:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006576:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800657a:	6030      	str	r0, [r6, #0]
 800657c:	6918      	ldr	r0, [r3, #16]
 800657e:	f7ff fdae 	bl	80060de <__hi0bits>
 8006582:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006586:	e7e1      	b.n	800654c <__d2b+0x62>

08006588 <_calloc_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	fb02 f401 	mul.w	r4, r2, r1
 800658e:	4621      	mov	r1, r4
 8006590:	f000 f856 	bl	8006640 <_malloc_r>
 8006594:	4605      	mov	r5, r0
 8006596:	b118      	cbz	r0, 80065a0 <_calloc_r+0x18>
 8006598:	4622      	mov	r2, r4
 800659a:	2100      	movs	r1, #0
 800659c:	f7fe fa20 	bl	80049e0 <memset>
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}

080065a4 <_free_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4605      	mov	r5, r0
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d045      	beq.n	8006638 <_free_r+0x94>
 80065ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b0:	1f0c      	subs	r4, r1, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfb8      	it	lt
 80065b6:	18e4      	addlt	r4, r4, r3
 80065b8:	f000 fa29 	bl	8006a0e <__malloc_lock>
 80065bc:	4a1f      	ldr	r2, [pc, #124]	; (800663c <_free_r+0x98>)
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	4610      	mov	r0, r2
 80065c2:	b933      	cbnz	r3, 80065d2 <_free_r+0x2e>
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	6014      	str	r4, [r2, #0]
 80065c8:	4628      	mov	r0, r5
 80065ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ce:	f000 ba1f 	b.w	8006a10 <__malloc_unlock>
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	d90c      	bls.n	80065f0 <_free_r+0x4c>
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	1862      	adds	r2, r4, r1
 80065da:	4293      	cmp	r3, r2
 80065dc:	bf04      	itt	eq
 80065de:	681a      	ldreq	r2, [r3, #0]
 80065e0:	685b      	ldreq	r3, [r3, #4]
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	bf04      	itt	eq
 80065e6:	1852      	addeq	r2, r2, r1
 80065e8:	6022      	streq	r2, [r4, #0]
 80065ea:	6004      	str	r4, [r0, #0]
 80065ec:	e7ec      	b.n	80065c8 <_free_r+0x24>
 80065ee:	4613      	mov	r3, r2
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	b10a      	cbz	r2, 80065f8 <_free_r+0x54>
 80065f4:	42a2      	cmp	r2, r4
 80065f6:	d9fa      	bls.n	80065ee <_free_r+0x4a>
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	1858      	adds	r0, r3, r1
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d10b      	bne.n	8006618 <_free_r+0x74>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	4401      	add	r1, r0
 8006604:	1858      	adds	r0, r3, r1
 8006606:	4282      	cmp	r2, r0
 8006608:	6019      	str	r1, [r3, #0]
 800660a:	d1dd      	bne.n	80065c8 <_free_r+0x24>
 800660c:	6810      	ldr	r0, [r2, #0]
 800660e:	6852      	ldr	r2, [r2, #4]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	4401      	add	r1, r0
 8006614:	6019      	str	r1, [r3, #0]
 8006616:	e7d7      	b.n	80065c8 <_free_r+0x24>
 8006618:	d902      	bls.n	8006620 <_free_r+0x7c>
 800661a:	230c      	movs	r3, #12
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	e7d3      	b.n	80065c8 <_free_r+0x24>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	1821      	adds	r1, r4, r0
 8006624:	428a      	cmp	r2, r1
 8006626:	bf04      	itt	eq
 8006628:	6811      	ldreq	r1, [r2, #0]
 800662a:	6852      	ldreq	r2, [r2, #4]
 800662c:	6062      	str	r2, [r4, #4]
 800662e:	bf04      	itt	eq
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	605c      	str	r4, [r3, #4]
 8006636:	e7c7      	b.n	80065c8 <_free_r+0x24>
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	bf00      	nop
 800663c:	20000330 	.word	0x20000330

08006640 <_malloc_r>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	1ccd      	adds	r5, r1, #3
 8006644:	f025 0503 	bic.w	r5, r5, #3
 8006648:	3508      	adds	r5, #8
 800664a:	2d0c      	cmp	r5, #12
 800664c:	bf38      	it	cc
 800664e:	250c      	movcc	r5, #12
 8006650:	2d00      	cmp	r5, #0
 8006652:	4606      	mov	r6, r0
 8006654:	db01      	blt.n	800665a <_malloc_r+0x1a>
 8006656:	42a9      	cmp	r1, r5
 8006658:	d903      	bls.n	8006662 <_malloc_r+0x22>
 800665a:	230c      	movs	r3, #12
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	2000      	movs	r0, #0
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	f000 f9d4 	bl	8006a0e <__malloc_lock>
 8006666:	4a21      	ldr	r2, [pc, #132]	; (80066ec <_malloc_r+0xac>)
 8006668:	6814      	ldr	r4, [r2, #0]
 800666a:	4621      	mov	r1, r4
 800666c:	b991      	cbnz	r1, 8006694 <_malloc_r+0x54>
 800666e:	4c20      	ldr	r4, [pc, #128]	; (80066f0 <_malloc_r+0xb0>)
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	b91b      	cbnz	r3, 800667c <_malloc_r+0x3c>
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f98f 	bl	8006998 <_sbrk_r>
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	4629      	mov	r1, r5
 800667e:	4630      	mov	r0, r6
 8006680:	f000 f98a 	bl	8006998 <_sbrk_r>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d124      	bne.n	80066d2 <_malloc_r+0x92>
 8006688:	230c      	movs	r3, #12
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f9bf 	bl	8006a10 <__malloc_unlock>
 8006692:	e7e4      	b.n	800665e <_malloc_r+0x1e>
 8006694:	680b      	ldr	r3, [r1, #0]
 8006696:	1b5b      	subs	r3, r3, r5
 8006698:	d418      	bmi.n	80066cc <_malloc_r+0x8c>
 800669a:	2b0b      	cmp	r3, #11
 800669c:	d90f      	bls.n	80066be <_malloc_r+0x7e>
 800669e:	600b      	str	r3, [r1, #0]
 80066a0:	50cd      	str	r5, [r1, r3]
 80066a2:	18cc      	adds	r4, r1, r3
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 f9b3 	bl	8006a10 <__malloc_unlock>
 80066aa:	f104 000b 	add.w	r0, r4, #11
 80066ae:	1d23      	adds	r3, r4, #4
 80066b0:	f020 0007 	bic.w	r0, r0, #7
 80066b4:	1ac3      	subs	r3, r0, r3
 80066b6:	d0d3      	beq.n	8006660 <_malloc_r+0x20>
 80066b8:	425a      	negs	r2, r3
 80066ba:	50e2      	str	r2, [r4, r3]
 80066bc:	e7d0      	b.n	8006660 <_malloc_r+0x20>
 80066be:	428c      	cmp	r4, r1
 80066c0:	684b      	ldr	r3, [r1, #4]
 80066c2:	bf16      	itet	ne
 80066c4:	6063      	strne	r3, [r4, #4]
 80066c6:	6013      	streq	r3, [r2, #0]
 80066c8:	460c      	movne	r4, r1
 80066ca:	e7eb      	b.n	80066a4 <_malloc_r+0x64>
 80066cc:	460c      	mov	r4, r1
 80066ce:	6849      	ldr	r1, [r1, #4]
 80066d0:	e7cc      	b.n	800666c <_malloc_r+0x2c>
 80066d2:	1cc4      	adds	r4, r0, #3
 80066d4:	f024 0403 	bic.w	r4, r4, #3
 80066d8:	42a0      	cmp	r0, r4
 80066da:	d005      	beq.n	80066e8 <_malloc_r+0xa8>
 80066dc:	1a21      	subs	r1, r4, r0
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f95a 	bl	8006998 <_sbrk_r>
 80066e4:	3001      	adds	r0, #1
 80066e6:	d0cf      	beq.n	8006688 <_malloc_r+0x48>
 80066e8:	6025      	str	r5, [r4, #0]
 80066ea:	e7db      	b.n	80066a4 <_malloc_r+0x64>
 80066ec:	20000330 	.word	0x20000330
 80066f0:	20000334 	.word	0x20000334

080066f4 <__ssputs_r>:
 80066f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	688e      	ldr	r6, [r1, #8]
 80066fa:	429e      	cmp	r6, r3
 80066fc:	4682      	mov	sl, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4690      	mov	r8, r2
 8006702:	4699      	mov	r9, r3
 8006704:	d837      	bhi.n	8006776 <__ssputs_r+0x82>
 8006706:	898a      	ldrh	r2, [r1, #12]
 8006708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800670c:	d031      	beq.n	8006772 <__ssputs_r+0x7e>
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	6909      	ldr	r1, [r1, #16]
 8006712:	1a6f      	subs	r7, r5, r1
 8006714:	6965      	ldr	r5, [r4, #20]
 8006716:	2302      	movs	r3, #2
 8006718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800671c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006720:	f109 0301 	add.w	r3, r9, #1
 8006724:	443b      	add	r3, r7
 8006726:	429d      	cmp	r5, r3
 8006728:	bf38      	it	cc
 800672a:	461d      	movcc	r5, r3
 800672c:	0553      	lsls	r3, r2, #21
 800672e:	d530      	bpl.n	8006792 <__ssputs_r+0x9e>
 8006730:	4629      	mov	r1, r5
 8006732:	f7ff ff85 	bl	8006640 <_malloc_r>
 8006736:	4606      	mov	r6, r0
 8006738:	b950      	cbnz	r0, 8006750 <__ssputs_r+0x5c>
 800673a:	230c      	movs	r3, #12
 800673c:	f8ca 3000 	str.w	r3, [sl]
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	463a      	mov	r2, r7
 8006752:	6921      	ldr	r1, [r4, #16]
 8006754:	f7ff fc32 	bl	8005fbc <memcpy>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800675e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	6126      	str	r6, [r4, #16]
 8006766:	6165      	str	r5, [r4, #20]
 8006768:	443e      	add	r6, r7
 800676a:	1bed      	subs	r5, r5, r7
 800676c:	6026      	str	r6, [r4, #0]
 800676e:	60a5      	str	r5, [r4, #8]
 8006770:	464e      	mov	r6, r9
 8006772:	454e      	cmp	r6, r9
 8006774:	d900      	bls.n	8006778 <__ssputs_r+0x84>
 8006776:	464e      	mov	r6, r9
 8006778:	4632      	mov	r2, r6
 800677a:	4641      	mov	r1, r8
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	f000 f92d 	bl	80069dc <memmove>
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	1b9b      	subs	r3, r3, r6
 8006786:	60a3      	str	r3, [r4, #8]
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	441e      	add	r6, r3
 800678c:	6026      	str	r6, [r4, #0]
 800678e:	2000      	movs	r0, #0
 8006790:	e7dc      	b.n	800674c <__ssputs_r+0x58>
 8006792:	462a      	mov	r2, r5
 8006794:	f000 f93d 	bl	8006a12 <_realloc_r>
 8006798:	4606      	mov	r6, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	d1e2      	bne.n	8006764 <__ssputs_r+0x70>
 800679e:	6921      	ldr	r1, [r4, #16]
 80067a0:	4650      	mov	r0, sl
 80067a2:	f7ff feff 	bl	80065a4 <_free_r>
 80067a6:	e7c8      	b.n	800673a <__ssputs_r+0x46>

080067a8 <_svfiprintf_r>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	461d      	mov	r5, r3
 80067ae:	898b      	ldrh	r3, [r1, #12]
 80067b0:	061f      	lsls	r7, r3, #24
 80067b2:	b09d      	sub	sp, #116	; 0x74
 80067b4:	4680      	mov	r8, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d50f      	bpl.n	80067dc <_svfiprintf_r+0x34>
 80067bc:	690b      	ldr	r3, [r1, #16]
 80067be:	b96b      	cbnz	r3, 80067dc <_svfiprintf_r+0x34>
 80067c0:	2140      	movs	r1, #64	; 0x40
 80067c2:	f7ff ff3d 	bl	8006640 <_malloc_r>
 80067c6:	6020      	str	r0, [r4, #0]
 80067c8:	6120      	str	r0, [r4, #16]
 80067ca:	b928      	cbnz	r0, 80067d8 <_svfiprintf_r+0x30>
 80067cc:	230c      	movs	r3, #12
 80067ce:	f8c8 3000 	str.w	r3, [r8]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	e0c8      	b.n	800696a <_svfiprintf_r+0x1c2>
 80067d8:	2340      	movs	r3, #64	; 0x40
 80067da:	6163      	str	r3, [r4, #20]
 80067dc:	2300      	movs	r3, #0
 80067de:	9309      	str	r3, [sp, #36]	; 0x24
 80067e0:	2320      	movs	r3, #32
 80067e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067e6:	2330      	movs	r3, #48	; 0x30
 80067e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ec:	9503      	str	r5, [sp, #12]
 80067ee:	f04f 0b01 	mov.w	fp, #1
 80067f2:	4637      	mov	r7, r6
 80067f4:	463d      	mov	r5, r7
 80067f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067fa:	b10b      	cbz	r3, 8006800 <_svfiprintf_r+0x58>
 80067fc:	2b25      	cmp	r3, #37	; 0x25
 80067fe:	d13e      	bne.n	800687e <_svfiprintf_r+0xd6>
 8006800:	ebb7 0a06 	subs.w	sl, r7, r6
 8006804:	d00b      	beq.n	800681e <_svfiprintf_r+0x76>
 8006806:	4653      	mov	r3, sl
 8006808:	4632      	mov	r2, r6
 800680a:	4621      	mov	r1, r4
 800680c:	4640      	mov	r0, r8
 800680e:	f7ff ff71 	bl	80066f4 <__ssputs_r>
 8006812:	3001      	adds	r0, #1
 8006814:	f000 80a4 	beq.w	8006960 <_svfiprintf_r+0x1b8>
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	4453      	add	r3, sl
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	783b      	ldrb	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 809d 	beq.w	8006960 <_svfiprintf_r+0x1b8>
 8006826:	2300      	movs	r3, #0
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006838:	931a      	str	r3, [sp, #104]	; 0x68
 800683a:	462f      	mov	r7, r5
 800683c:	2205      	movs	r2, #5
 800683e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006842:	4850      	ldr	r0, [pc, #320]	; (8006984 <_svfiprintf_r+0x1dc>)
 8006844:	f7f9 fce4 	bl	8000210 <memchr>
 8006848:	9b04      	ldr	r3, [sp, #16]
 800684a:	b9d0      	cbnz	r0, 8006882 <_svfiprintf_r+0xda>
 800684c:	06d9      	lsls	r1, r3, #27
 800684e:	bf44      	itt	mi
 8006850:	2220      	movmi	r2, #32
 8006852:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006856:	071a      	lsls	r2, r3, #28
 8006858:	bf44      	itt	mi
 800685a:	222b      	movmi	r2, #43	; 0x2b
 800685c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006860:	782a      	ldrb	r2, [r5, #0]
 8006862:	2a2a      	cmp	r2, #42	; 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xea>
 8006866:	9a07      	ldr	r2, [sp, #28]
 8006868:	462f      	mov	r7, r5
 800686a:	2000      	movs	r0, #0
 800686c:	250a      	movs	r5, #10
 800686e:	4639      	mov	r1, r7
 8006870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006874:	3b30      	subs	r3, #48	; 0x30
 8006876:	2b09      	cmp	r3, #9
 8006878:	d94d      	bls.n	8006916 <_svfiprintf_r+0x16e>
 800687a:	b1b8      	cbz	r0, 80068ac <_svfiprintf_r+0x104>
 800687c:	e00f      	b.n	800689e <_svfiprintf_r+0xf6>
 800687e:	462f      	mov	r7, r5
 8006880:	e7b8      	b.n	80067f4 <_svfiprintf_r+0x4c>
 8006882:	4a40      	ldr	r2, [pc, #256]	; (8006984 <_svfiprintf_r+0x1dc>)
 8006884:	1a80      	subs	r0, r0, r2
 8006886:	fa0b f000 	lsl.w	r0, fp, r0
 800688a:	4318      	orrs	r0, r3
 800688c:	9004      	str	r0, [sp, #16]
 800688e:	463d      	mov	r5, r7
 8006890:	e7d3      	b.n	800683a <_svfiprintf_r+0x92>
 8006892:	9a03      	ldr	r2, [sp, #12]
 8006894:	1d11      	adds	r1, r2, #4
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2a00      	cmp	r2, #0
 800689c:	db01      	blt.n	80068a2 <_svfiprintf_r+0xfa>
 800689e:	9207      	str	r2, [sp, #28]
 80068a0:	e004      	b.n	80068ac <_svfiprintf_r+0x104>
 80068a2:	4252      	negs	r2, r2
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	9207      	str	r2, [sp, #28]
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	783b      	ldrb	r3, [r7, #0]
 80068ae:	2b2e      	cmp	r3, #46	; 0x2e
 80068b0:	d10c      	bne.n	80068cc <_svfiprintf_r+0x124>
 80068b2:	787b      	ldrb	r3, [r7, #1]
 80068b4:	2b2a      	cmp	r3, #42	; 0x2a
 80068b6:	d133      	bne.n	8006920 <_svfiprintf_r+0x178>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfb8      	it	lt
 80068c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068c8:	3702      	adds	r7, #2
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	4d2e      	ldr	r5, [pc, #184]	; (8006988 <_svfiprintf_r+0x1e0>)
 80068ce:	7839      	ldrb	r1, [r7, #0]
 80068d0:	2203      	movs	r2, #3
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7f9 fc9c 	bl	8000210 <memchr>
 80068d8:	b138      	cbz	r0, 80068ea <_svfiprintf_r+0x142>
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	1b40      	subs	r0, r0, r5
 80068de:	fa03 f000 	lsl.w	r0, r3, r0
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	4303      	orrs	r3, r0
 80068e6:	3701      	adds	r7, #1
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	7839      	ldrb	r1, [r7, #0]
 80068ec:	4827      	ldr	r0, [pc, #156]	; (800698c <_svfiprintf_r+0x1e4>)
 80068ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068f2:	2206      	movs	r2, #6
 80068f4:	1c7e      	adds	r6, r7, #1
 80068f6:	f7f9 fc8b 	bl	8000210 <memchr>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d038      	beq.n	8006970 <_svfiprintf_r+0x1c8>
 80068fe:	4b24      	ldr	r3, [pc, #144]	; (8006990 <_svfiprintf_r+0x1e8>)
 8006900:	bb13      	cbnz	r3, 8006948 <_svfiprintf_r+0x1a0>
 8006902:	9b03      	ldr	r3, [sp, #12]
 8006904:	3307      	adds	r3, #7
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	3308      	adds	r3, #8
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006910:	444b      	add	r3, r9
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	e76d      	b.n	80067f2 <_svfiprintf_r+0x4a>
 8006916:	fb05 3202 	mla	r2, r5, r2, r3
 800691a:	2001      	movs	r0, #1
 800691c:	460f      	mov	r7, r1
 800691e:	e7a6      	b.n	800686e <_svfiprintf_r+0xc6>
 8006920:	2300      	movs	r3, #0
 8006922:	3701      	adds	r7, #1
 8006924:	9305      	str	r3, [sp, #20]
 8006926:	4619      	mov	r1, r3
 8006928:	250a      	movs	r5, #10
 800692a:	4638      	mov	r0, r7
 800692c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006930:	3a30      	subs	r2, #48	; 0x30
 8006932:	2a09      	cmp	r2, #9
 8006934:	d903      	bls.n	800693e <_svfiprintf_r+0x196>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0c8      	beq.n	80068cc <_svfiprintf_r+0x124>
 800693a:	9105      	str	r1, [sp, #20]
 800693c:	e7c6      	b.n	80068cc <_svfiprintf_r+0x124>
 800693e:	fb05 2101 	mla	r1, r5, r1, r2
 8006942:	2301      	movs	r3, #1
 8006944:	4607      	mov	r7, r0
 8006946:	e7f0      	b.n	800692a <_svfiprintf_r+0x182>
 8006948:	ab03      	add	r3, sp, #12
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4622      	mov	r2, r4
 800694e:	4b11      	ldr	r3, [pc, #68]	; (8006994 <_svfiprintf_r+0x1ec>)
 8006950:	a904      	add	r1, sp, #16
 8006952:	4640      	mov	r0, r8
 8006954:	f7fe f8e0 	bl	8004b18 <_printf_float>
 8006958:	f1b0 3fff 	cmp.w	r0, #4294967295
 800695c:	4681      	mov	r9, r0
 800695e:	d1d6      	bne.n	800690e <_svfiprintf_r+0x166>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	065b      	lsls	r3, r3, #25
 8006964:	f53f af35 	bmi.w	80067d2 <_svfiprintf_r+0x2a>
 8006968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696a:	b01d      	add	sp, #116	; 0x74
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	ab03      	add	r3, sp, #12
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	4622      	mov	r2, r4
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <_svfiprintf_r+0x1ec>)
 8006978:	a904      	add	r1, sp, #16
 800697a:	4640      	mov	r0, r8
 800697c:	f7fe fb82 	bl	8005084 <_printf_i>
 8006980:	e7ea      	b.n	8006958 <_svfiprintf_r+0x1b0>
 8006982:	bf00      	nop
 8006984:	0800722c 	.word	0x0800722c
 8006988:	08007232 	.word	0x08007232
 800698c:	08007236 	.word	0x08007236
 8006990:	08004b19 	.word	0x08004b19
 8006994:	080066f5 	.word	0x080066f5

08006998 <_sbrk_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4c06      	ldr	r4, [pc, #24]	; (80069b4 <_sbrk_r+0x1c>)
 800699c:	2300      	movs	r3, #0
 800699e:	4605      	mov	r5, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	f7fb fe48 	bl	8002638 <_sbrk>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_sbrk_r+0x1a>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_sbrk_r+0x1a>
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	200004a0 	.word	0x200004a0

080069b8 <__ascii_mbtowc>:
 80069b8:	b082      	sub	sp, #8
 80069ba:	b901      	cbnz	r1, 80069be <__ascii_mbtowc+0x6>
 80069bc:	a901      	add	r1, sp, #4
 80069be:	b142      	cbz	r2, 80069d2 <__ascii_mbtowc+0x1a>
 80069c0:	b14b      	cbz	r3, 80069d6 <__ascii_mbtowc+0x1e>
 80069c2:	7813      	ldrb	r3, [r2, #0]
 80069c4:	600b      	str	r3, [r1, #0]
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	1c10      	adds	r0, r2, #0
 80069ca:	bf18      	it	ne
 80069cc:	2001      	movne	r0, #1
 80069ce:	b002      	add	sp, #8
 80069d0:	4770      	bx	lr
 80069d2:	4610      	mov	r0, r2
 80069d4:	e7fb      	b.n	80069ce <__ascii_mbtowc+0x16>
 80069d6:	f06f 0001 	mvn.w	r0, #1
 80069da:	e7f8      	b.n	80069ce <__ascii_mbtowc+0x16>

080069dc <memmove>:
 80069dc:	4288      	cmp	r0, r1
 80069de:	b510      	push	{r4, lr}
 80069e0:	eb01 0302 	add.w	r3, r1, r2
 80069e4:	d807      	bhi.n	80069f6 <memmove+0x1a>
 80069e6:	1e42      	subs	r2, r0, #1
 80069e8:	4299      	cmp	r1, r3
 80069ea:	d00a      	beq.n	8006a02 <memmove+0x26>
 80069ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069f4:	e7f8      	b.n	80069e8 <memmove+0xc>
 80069f6:	4283      	cmp	r3, r0
 80069f8:	d9f5      	bls.n	80069e6 <memmove+0xa>
 80069fa:	1881      	adds	r1, r0, r2
 80069fc:	1ad2      	subs	r2, r2, r3
 80069fe:	42d3      	cmn	r3, r2
 8006a00:	d100      	bne.n	8006a04 <memmove+0x28>
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a0c:	e7f7      	b.n	80069fe <memmove+0x22>

08006a0e <__malloc_lock>:
 8006a0e:	4770      	bx	lr

08006a10 <__malloc_unlock>:
 8006a10:	4770      	bx	lr

08006a12 <_realloc_r>:
 8006a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a14:	4607      	mov	r7, r0
 8006a16:	4614      	mov	r4, r2
 8006a18:	460e      	mov	r6, r1
 8006a1a:	b921      	cbnz	r1, 8006a26 <_realloc_r+0x14>
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a22:	f7ff be0d 	b.w	8006640 <_malloc_r>
 8006a26:	b922      	cbnz	r2, 8006a32 <_realloc_r+0x20>
 8006a28:	f7ff fdbc 	bl	80065a4 <_free_r>
 8006a2c:	4625      	mov	r5, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a32:	f000 f821 	bl	8006a78 <_malloc_usable_size_r>
 8006a36:	42a0      	cmp	r0, r4
 8006a38:	d20f      	bcs.n	8006a5a <_realloc_r+0x48>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff fdff 	bl	8006640 <_malloc_r>
 8006a42:	4605      	mov	r5, r0
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d0f2      	beq.n	8006a2e <_realloc_r+0x1c>
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	f7ff fab6 	bl	8005fbc <memcpy>
 8006a50:	4631      	mov	r1, r6
 8006a52:	4638      	mov	r0, r7
 8006a54:	f7ff fda6 	bl	80065a4 <_free_r>
 8006a58:	e7e9      	b.n	8006a2e <_realloc_r+0x1c>
 8006a5a:	4635      	mov	r5, r6
 8006a5c:	e7e7      	b.n	8006a2e <_realloc_r+0x1c>

08006a5e <__ascii_wctomb>:
 8006a5e:	b149      	cbz	r1, 8006a74 <__ascii_wctomb+0x16>
 8006a60:	2aff      	cmp	r2, #255	; 0xff
 8006a62:	bf85      	ittet	hi
 8006a64:	238a      	movhi	r3, #138	; 0x8a
 8006a66:	6003      	strhi	r3, [r0, #0]
 8006a68:	700a      	strbls	r2, [r1, #0]
 8006a6a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a6e:	bf98      	it	ls
 8006a70:	2001      	movls	r0, #1
 8006a72:	4770      	bx	lr
 8006a74:	4608      	mov	r0, r1
 8006a76:	4770      	bx	lr

08006a78 <_malloc_usable_size_r>:
 8006a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7c:	1f18      	subs	r0, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfbc      	itt	lt
 8006a82:	580b      	ldrlt	r3, [r1, r0]
 8006a84:	18c0      	addlt	r0, r0, r3
 8006a86:	4770      	bx	lr

08006a88 <_init>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	bf00      	nop
 8006a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8e:	bc08      	pop	{r3}
 8006a90:	469e      	mov	lr, r3
 8006a92:	4770      	bx	lr

08006a94 <_fini>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr
